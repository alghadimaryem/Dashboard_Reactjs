import * as React from 'react';
import * as PropTypes from 'prop-types';
/**
 * @hidden
 */
export interface BaseDraggableEvent<T extends React.Component> {
    /**
     * The target Draggable component.
     */
    target: T;
    /**
     * The original event.
     */
    event: any;
}
/**
 * Represents the object of the `onPress` Draggable event.
 */
export interface DraggablePressEvent extends BaseDraggableEvent<Draggable> {
    /**
     * The element which is pressed.
     */
    element: HTMLElement;
}
/**
 * Represents the object of the `onDrag` Draggable event.
 */
export interface DraggableDragEvent extends BaseDraggableEvent<Draggable> {
    /**
     * The element which is pressed.
     */
    element: HTMLElement;
}
/**
 * Represents the object of the `onRelease` Draggable event.
 */
export interface DraggableReleaseEvent extends BaseDraggableEvent<Draggable> {
}
/**
 * Represents the props of the KendoReact Draggable component.
 */
export interface DraggableProps {
    /**
     * Fires when the user press element inside the Draggable component.
     */
    onPress?: (event: DraggablePressEvent) => void;
    /**
     * Fires when the user drag the element inside the Draggable component.
     */
    onDrag?: (event: DraggableDragEvent) => void;
    /**
     * Fires when the user release the current drag action.
     */
    onRelease?: (event: DraggableReleaseEvent) => void;
    /**
     * Callback to get the child element ref. Useful as the Draggable overrides ref of  the child element.
     */
    childRef?: (childElement: HTMLElement) => void;
}
/**
 * Represents the KendoReact Draggable component.
 */
export declare class Draggable extends React.Component<DraggableProps, {}> {
    static propTypes: {
        children: PropTypes.Validator<PropTypes.ReactElementLike>;
    };
    /**
     * @hidden
     */
    element: HTMLElement | null;
    private draggable;
    componentDidMount(): void;
    componentWillUnmount(): void;
    childRef: (element: any) => void;
    render(): React.FunctionComponentElement<{
        ref: (element: any) => void;
    }>;
}
