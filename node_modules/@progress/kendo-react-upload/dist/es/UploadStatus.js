var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
import { classNames } from '@progress/kendo-react-common';
import { provideLocalizationService, registerForLocalization } from '@progress/kendo-react-intl';
import { messages, headerStatusUploading, headerStatusUploaded } from './messages';
/**
 * @hidden
 */
var UploadStatus = /** @class */ (function (_super) {
    __extends(UploadStatus, _super);
    function UploadStatus() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UploadStatus.prototype.render = function () {
        var _a = this.props, isUploading = _a.isUploading, isUploaded = _a.isUploaded, isUploadFailed = _a.isUploadFailed;
        var className = classNames('k-upload-status', 'k-upload-status-total');
        var statusClassName = classNames(!isUploading && !isUploadFailed && isUploaded ? 'k-i-checkmark' : '', !isUploading && isUploadFailed ? 'k-i-exception' : '', isUploading ? 'k-i-loading' : '', 'k-icon');
        var statusText = '';
        var localizationService = provideLocalizationService(this);
        if (isUploading) {
            statusText = localizationService
                .toLanguageString(headerStatusUploading, messages[headerStatusUploading]);
        }
        else if (isUploaded || isUploadFailed) {
            statusText = localizationService
                .toLanguageString(headerStatusUploaded, messages[headerStatusUploaded]);
        }
        return (React.createElement("div", { className: className },
            React.createElement("span", { className: statusClassName }),
            statusText));
    };
    return UploadStatus;
}(React.Component));
export { UploadStatus };
registerForLocalization(UploadStatus);
//# sourceMappingURL=UploadStatus.js.map