var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import { classNames } from '@progress/kendo-react-common';
import { UploadListGroup } from './UploadListGroup';
/**
 * @hidden
 */
var UploadList = /** @class */ (function (_super) {
    __extends(UploadList, _super);
    function UploadList() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UploadList.prototype.mapListGroups = function () {
        var _a = this.props, groupedFiles = _a.groupedFiles, navigationIndex = _a.navigationIndex, others = __rest(_a, ["groupedFiles", "navigationIndex"]);
        return Object
            .keys(groupedFiles)
            .map(function (key, index) {
            var files = groupedFiles[key];
            return (React.createElement(UploadListGroup, __assign({ key: key, files: files, index: index, navigationIndex: navigationIndex }, others)));
        });
    };
    UploadList.prototype.render = function () {
        var ulClassName = classNames('k-upload-files', 'k-reset');
        return (React.createElement("ul", { className: ulClassName }, this.mapListGroups()));
    };
    return UploadList;
}(React.Component));
export { UploadList };
//# sourceMappingURL=UploadList.js.map