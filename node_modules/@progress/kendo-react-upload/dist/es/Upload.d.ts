import * as React from 'react';
import * as PropTypes from 'prop-types';
import { GroupedFiles } from './interfaces/FileGroup';
import { UploadFileInfo } from './interfaces/UploadFileInfo';
import { UploadFileStatus } from './interfaces/UploadFileStatus';
import { AxiosResponse } from 'axios';
import { UploadProps } from './interfaces/UploadProps';
/**
 * @hidden
 */
interface UploadState {
    files: Array<UploadFileInfo>;
}
export declare class Upload extends React.Component<UploadProps, UploadState> {
    /**
     * @hidden
     */
    static defaultProps: UploadProps;
    /**
     * @hidden
     */
    static propTypes: {
        autoUpload: PropTypes.Requireable<boolean>;
        batch: PropTypes.Requireable<boolean>;
        withCredentials: PropTypes.Requireable<boolean>;
        saveField: PropTypes.Requireable<string>;
        saveHeaders: PropTypes.Requireable<object>;
        saveMethod: PropTypes.Requireable<string>;
        saveUrl: PropTypes.Requireable<string | ((...args: any[]) => any)>;
        responseType: PropTypes.Requireable<string>;
        removeField: PropTypes.Requireable<string>;
        removeHeaders: PropTypes.Requireable<object>;
        removeMethod: PropTypes.Requireable<string>;
        removeUrl: PropTypes.Requireable<string | ((...args: any[]) => any)>;
        multiple: PropTypes.Requireable<boolean>;
        disabled: PropTypes.Requireable<boolean>;
        showFileList: PropTypes.Requireable<boolean>;
        showActionButtons: PropTypes.Requireable<boolean>;
        actionsLayout: PropTypes.Requireable<string>;
        tabIndex: PropTypes.Requireable<number>;
        accept: PropTypes.Requireable<string>;
        listItemUI: PropTypes.Requireable<string | ((...args: any[]) => any) | PropTypes.InferProps<{
            render: PropTypes.Validator<(...args: any[]) => any>;
        }>>;
        restrictions: PropTypes.Requireable<PropTypes.InferProps<{
            allowedExtensions: PropTypes.Requireable<string[]>;
            maxFileSize: PropTypes.Requireable<number>;
            minFileSize: PropTypes.Requireable<number>;
        }>>;
        files: PropTypes.Requireable<PropTypes.InferProps<{
            uid: PropTypes.Requireable<string>;
            name: PropTypes.Requireable<string>;
            extension: PropTypes.Requireable<string>;
            size: PropTypes.Requireable<number>;
            validationErrors: PropTypes.Requireable<string[]>;
            status: PropTypes.Requireable<UploadFileStatus>;
            progress: PropTypes.Requireable<number>;
            getRawFile: PropTypes.Requireable<(...args: any[]) => any>;
        }>[]>;
        defaultFiles: PropTypes.Requireable<PropTypes.InferProps<{
            uid: PropTypes.Requireable<string>;
            name: PropTypes.Requireable<string>;
            extension: PropTypes.Requireable<string>;
            size: PropTypes.Requireable<number>;
            validationErrors: PropTypes.Requireable<string[]>;
            status: PropTypes.Requireable<UploadFileStatus>;
            progress: PropTypes.Requireable<number>;
            getRawFile: PropTypes.Requireable<(...args: any[]) => any>;
        }>[]>;
    };
    private _httpSubscriptions;
    private readonly async;
    private _uploadNavigation;
    private readonly files;
    private readonly isControlled;
    private readonly isCustomSave;
    private readonly isCustomRemove;
    private readonly fileStateCopy;
    constructor(props: UploadProps);
    /**
     * @hidden
     */
    readonly actionElement: HTMLInputElement;
    /**
     * @hidden
     */
    focus: () => void;
    /**
     * @hidden
     */
    uploadFiles: (filesForUpload: GroupedFiles) => void;
    /**
     * @hidden
     */
    removeFiles: (filesForRemove: GroupedFiles) => void;
    /**
     * @hidden
     */
    onUpload: () => void;
    /**
     * @hidden
     */
    onAdd: (files: FileList) => void;
    /**
     * @hidden
     */
    onUploadProgress: (uid: string, event: ProgressEvent) => void;
    /**
     * @hidden
     */
    onUploadSuccess: (uid: string, event?: AxiosResponse<any>) => void;
    /**
     * @hidden
     */
    onUploadError: (uid: string, event?: AxiosResponse<any>) => void;
    /**
     * @hidden
     */
    onRemove: (uid: string) => void;
    /**
     * @hidden
     */
    onRemoveSuccess: (uid: string, event?: AxiosResponse<any>) => void;
    /**
     * @hidden
     */
    onRemoveError: (uid: string, event?: AxiosResponse<any>) => void;
    /**
     * @hidden
     */
    onRetry: (uid: string) => void;
    /**
     * @hidden
     */
    onCancel: (uid: string) => void;
    /**
     * @hidden
     */
    onClear: () => void;
    /**
     * @hidden
     */
    render(): JSX.Element;
}
export {};
