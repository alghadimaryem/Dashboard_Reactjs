var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import { classNames } from '@progress/kendo-react-common';
import utils from './utils/utils';
import { provideLocalizationService, registerForLocalization } from '@progress/kendo-react-intl';
import { messages, total, files as filesM, statusUploadFailed, statusUploaded } from './messages';
import { UploadListActionButton } from './UploadListActionButton';
/**
 * @hidden
 */
var UploadListMultiItem = /** @class */ (function (_super) {
    __extends(UploadListMultiItem, _super);
    function UploadListMultiItem() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * @hidden
         */
        _this.mapFiles = function () {
            var files = _this.props.files;
            return files.map(function (file) {
                return (React.createElement("span", { key: file.name, className: 'k-file-name-size-wrapper' },
                    React.createElement("span", { className: 'k-file-name', title: file.name }, file.name),
                    utils.fileHasValidationErrors(file) ?
                        (React.createElement("span", { className: 'k-file-validation-message k-text-error' }, _this.getFileValidationMessage(file))) :
                        (React.createElement("span", { key: file.name + "-size", className: 'k-file-size' }, utils.getTotalFilesSizeMessage([file])))));
            });
        };
        /**
         * @hidden
         */
        _this.progress = function () {
            var files = _this.props.files;
            var sum = 0;
            files.forEach(function (file) {
                sum += file.progress || 0;
            });
            return sum / files.length;
        };
        return _this;
    }
    /**
     * @hidden
     */
    UploadListMultiItem.prototype.getFileValidationMessage = function (file) {
        var localizationService = provideLocalizationService(this);
        var validationMessage = '';
        if (file.validationErrors && file.validationErrors.length > 0) {
            var messageKey = "upload." + file.validationErrors[0];
            validationMessage = localizationService.toLanguageString(messageKey, messages[messageKey]);
        }
        return validationMessage;
    };
    UploadListMultiItem.prototype.render = function () {
        var _a = this.props, files = _a.files, others = __rest(_a, ["files"]);
        var itemClassName = classNames('k-file-multiple');
        var _b = utils.getFileStatus(files), isUploaded = _b[1], isUploadFailed = _b[2], isUploadValidationFailed = _b[3];
        var localizationService = provideLocalizationService(this);
        var totalMessage = localizationService.toLanguageString(total, messages[total]);
        var filesMessage = localizationService.toLanguageString(filesM, messages[filesM]);
        var uploadFailedMessage = localizationService.toLanguageString(statusUploadFailed, messages[statusUploadFailed]);
        var successMessage = localizationService.toLanguageString(statusUploaded, messages[statusUploaded]);
        var progress = this.progress();
        var showProgressBar = !isUploadValidationFailed && !isUploaded && !isUploadFailed;
        return (React.createElement("div", { className: itemClassName },
            React.createElement("div", { className: 'k-progressbar', style: {
                    transition: 'opacity 1s ease-in-out',
                    opacity: showProgressBar ? 1 : 0
                } },
                React.createElement("span", { className: 'k-progress', style: { width: (progress || 0) + '%' } })),
            React.createElement("span", { className: 'k-multiple-files-group-wrapper' },
                React.createElement("span", { className: 'k-file-group k-icon k-i-copy' })),
            React.createElement("span", { className: "k-multiple-files-wrapper" },
                this.mapFiles(),
                !isUploadFailed ?
                    (progress !== 100 ?
                        (React.createElement("span", { className: 'k-file-information' }, totalMessage + ": " + files.length + " " + filesMessage + ", " + utils.getTotalFilesSizeMessage(files))) :
                        (React.createElement("span", { className: 'k-file-information k-text-success' }, files.length + " " + successMessage))) :
                    (React.createElement("span", { className: 'k-file-validation-message k-text-error' }, files.length + " " + uploadFailedMessage))),
            React.createElement(UploadListActionButton, __assign({ uid: files[0].uid, status: files[0].status, progress: progress }, others))));
    };
    return UploadListMultiItem;
}(React.Component));
export { UploadListMultiItem };
registerForLocalization(UploadListMultiItem);
//# sourceMappingURL=UploadListMultiItem.js.map