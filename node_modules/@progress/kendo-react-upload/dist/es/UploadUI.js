var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
import { classNames } from '@progress/kendo-react-common';
import { UploadList } from './UploadList';
import { UploadAddButton } from './UploadAddButton';
import { UploadActionButtons } from './UploadActionButtons';
import { UploadDropZone } from './UploadDropZone';
var ADD_BUTTON_NAV_INDEX = -1;
/**
 * @hidden
 */
var UploadUI = /** @class */ (function (_super) {
    __extends(UploadUI, _super);
    function UploadUI() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * @hidden
         */
        _this.focus = function () {
            if (_this._uploadAddButton) {
                return _this._uploadAddButton.focus();
            }
        };
        /**
         * @hidden
         */
        _this.onAdd = function (files) {
            if (_this.props.onAdd) {
                _this.props.onAdd.call(undefined, files);
            }
        };
        /**
         * @hidden
         */
        _this.onRetry = function (uid) {
            if (_this.props.onRetry) {
                _this.props.onRetry.call(undefined, uid);
            }
        };
        /**
         * @hidden
         */
        _this.onCancel = function (uid) {
            if (_this.props.onCancel) {
                _this.props.onCancel.call(undefined, uid);
            }
        };
        /**
         * @hidden
         */
        _this.onClear = function () {
            if (_this.props.onClear) {
                _this.props.onClear.call(undefined);
            }
        };
        /**
         * @hidden
         */
        _this.onUpload = function () {
            if (_this.props.onUpload) {
                _this.props.onUpload.call(undefined);
            }
        };
        /**
         * @hidden
         */
        _this.onRemove = function (uid) {
            if (_this.props.onRemove) {
                _this.props.onRemove.call(undefined, uid);
            }
        };
        /**
         * @hidden
         */
        _this.onKeyDown = function (event) {
            if (_this.props.onKeyDown) {
                _this.props.onKeyDown.call(undefined, event, _this.isRtl);
            }
        };
        /**
         * @hidden
         */
        _this.onFocus = function (event) {
            if (_this.props.onFocus) {
                _this.props.onFocus.call(undefined, event);
            }
        };
        /**
         * @hidden
         */
        _this.onBlur = function (event) {
            if (_this.props.onBlur) {
                _this.props.onBlur.call(undefined, event);
            }
        };
        /**
         * @hidden
         */
        _this.onClick = function (navIndex) {
            if (_this.props.onClick) {
                _this.props.onClick.call(undefined, navIndex);
            }
        };
        return _this;
    }
    Object.defineProperty(UploadUI.prototype, "async", {
        get: function () {
            var _a = this.props, autoUpload = _a.autoUpload, batch = _a.batch, withCredentials = _a.withCredentials, saveField = _a.saveField, saveHeaders = _a.saveHeaders, saveMethod = _a.saveMethod, saveUrl = _a.saveUrl, responseType = _a.responseType, removeField = _a.removeField, removeHeaders = _a.removeHeaders, removeMethod = _a.removeMethod, removeUrl = _a.removeUrl;
            return {
                autoUpload: autoUpload, batch: batch, withCredentials: withCredentials,
                saveField: saveField, saveHeaders: saveHeaders, saveMethod: saveMethod,
                saveUrl: saveUrl, responseType: responseType, removeField: removeField,
                removeHeaders: removeHeaders, removeMethod: removeMethod, removeUrl: removeUrl
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UploadUI.prototype, "groupsCount", {
        get: function () {
            return Object.keys(this.props.groupedFiles).length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UploadUI.prototype, "lastGroupIndex", {
        get: function () {
            return this.groupsCount - 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UploadUI.prototype, "addButtonIndex", {
        get: function () {
            return ADD_BUTTON_NAV_INDEX;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UploadUI.prototype, "clearButtonIndex", {
        get: function () {
            return this.lastGroupIndex + 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UploadUI.prototype, "uploadButtonIndex", {
        get: function () {
            return this.lastGroupIndex + 2;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UploadUI.prototype, "isRtl", {
        get: function () {
            return this._container && (getComputedStyle(this._container).direction === 'rtl') || false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UploadUI.prototype, "actionElement", {
        /**
         * @hidden
         */
        get: function () {
            if (this._uploadAddButton) {
                return this._uploadAddButton.actionElement;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    UploadUI.prototype.render = function () {
        var _this = this;
        var _a = this.props, multiple = _a.multiple, disabled = _a.disabled, tabIndex = _a.tabIndex, accept = _a.accept, showFileList = _a.showFileList, groupedFiles = _a.groupedFiles, navigationIndex = _a.navigationIndex, showActionButtons = _a.showActionButtons, actionsLayout = _a.actionsLayout, notFocusedIndex = _a.notFocusedIndex, listItemUI = _a.listItemUI, id = _a.id, ariaLabelledBy = _a.ariaLabelledBy, ariaDescribedBy = _a.ariaDescribedBy;
        var className = classNames('k-widget', 'k-upload', this.props.className, disabled ? 'k-state-disabled' : '');
        var addButtonComponent = (React.createElement(UploadAddButton, { id: id, ariaLabelledBy: ariaLabelledBy, ariaDescribedBy: ariaDescribedBy, ref: function (ref) { return _this._uploadAddButton = ref; }, accept: accept, async: this.async, addButtonIndex: this.addButtonIndex, navigationIndex: navigationIndex, notFocusedIndex: notFocusedIndex, tabIndex: tabIndex, multiple: multiple, disabled: disabled, onAdd: this.onAdd, onClick: this.onClick }));
        return (React.createElement("div", { ref: function (ref) { return _this._container = ref; }, className: className, onKeyDown: this.onKeyDown, onFocus: this.onFocus, onBlur: this.onBlur },
            React.createElement(UploadDropZone, { addButtonComponent: addButtonComponent, fileGroup: groupedFiles, disabled: disabled, onAdd: this.onAdd }),
            showFileList ?
                React.createElement(UploadList, { groupedFiles: groupedFiles, disabled: disabled, async: this.async, navigationIndex: navigationIndex, listItemUI: listItemUI, onCancel: this.onCancel, onRemove: this.onRemove, onRetry: this.onRetry, onClick: this.onClick }) : undefined,
            showActionButtons ?
                React.createElement(UploadActionButtons, { disabled: disabled, navigationIndex: navigationIndex, clearButtonIndex: this.clearButtonIndex, uploadButtonIndex: this.uploadButtonIndex, actionsLayout: actionsLayout, onUpload: this.onUpload, onClear: this.onClear, onClick: this.onClick }) : undefined));
    };
    UploadUI.defaultProps = {
        disabled: false,
        groupedFiles: {},
        multiple: true,
        actionsLayout: 'end'
    };
    return UploadUI;
}(React.Component));
export { UploadUI };
//# sourceMappingURL=UploadUI.js.map