var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { UploadFileStatus } from '../interfaces/UploadFileStatus';
var copyState = function (state) {
    return (state || []).map(function (file) {
        return __assign({}, file);
    });
};
var add = function (file, filesState) {
    filesState.push(file);
};
var addMany = function (fileList, filesState) {
    fileList.forEach(function (file) { return add(file, filesState); });
};
var groupFilesByUid = function (files) {
    var fileGroup = {};
    files.forEach(function (file) {
        if (fileGroup[file.uid]) {
            fileGroup[file.uid].push(file);
        }
        else {
            fileGroup[file.uid] = [file];
        }
    });
    return fileGroup;
};
var filesForUpload = function (files) {
    var notUploadedGroups = {};
    groupForEach(files, function (currentFiles, uid) {
        var currentFilesValid = true;
        currentFiles.forEach(function (file) {
            if (file.status !== UploadFileStatus.Selected ||
                (file.validationErrors && file.validationErrors.length > 0)) {
                currentFilesValid = false;
            }
        });
        if (currentFilesValid) {
            notUploadedGroups[uid] = currentFiles;
        }
    });
    return notUploadedGroups;
};
var setFilesStatus = function (filesGroup, status) {
    groupForEach(filesGroup, function (currentFiles) {
        currentFiles.forEach(function (file) {
            file.status = status;
        });
    });
};
var flatFileGroup = function (fileGroup) {
    var transformed = [];
    groupForEach(fileGroup, function (currentFiles) {
        transformed.push.apply(transformed, currentFiles);
    });
    return transformed;
};
var groupForEach = function (fileGroup, callBack) {
    Object.keys(fileGroup).forEach(function (uidKey) {
        callBack(fileGroup[uidKey], uidKey);
    });
};
export default {
    copyState: copyState,
    addMany: addMany,
    add: add,
    groupFilesByUid: groupFilesByUid,
    filesForUpload: filesForUpload,
    setFilesStatus: setFilesStatus,
    flatFileGroup: flatFileGroup,
    groupForEach: groupForEach
};
//# sourceMappingURL=stateUtils.js.map