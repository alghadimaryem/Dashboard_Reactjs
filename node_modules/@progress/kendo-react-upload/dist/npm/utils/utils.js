"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var UploadFileStatus_1 = require("../interfaces/UploadFileStatus");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var ampRegExp = /&/g;
var ltRegExp = /</g;
var quoteRegExp = /"/g;
var aposRegExp = /'/g;
var gtRegExp = />/g;
var htmlEncode = function (value) {
    return ('' + value).replace(ampRegExp, '&amp;')
        .replace(ltRegExp, '&lt;')
        .replace(gtRegExp, '&gt;')
        .replace(quoteRegExp, '&quot;')
        .replace(aposRegExp, '&#39;');
};
var getFileExtension = function (fileName) {
    var rFileExtension = /\.([^\.]+)$/;
    var matches = fileName.match(rFileExtension);
    return matches ? matches[0] : '';
};
var getFileInfo = function (rawFile) {
    var fileName = rawFile.name;
    var fileSize = rawFile.size;
    return {
        extension: getFileExtension(fileName),
        name: htmlEncode(fileName),
        getRawFile: function () { return rawFile; },
        size: fileSize,
        status: UploadFileStatus_1.UploadFileStatus.Selected,
        progress: 0,
        uid: ''
    };
};
var getAllFileInfo = function (rawFiles) {
    var allFileInfo = new Array();
    var i;
    for (i = 0; i < rawFiles.length; i++) {
        allFileInfo.push(getFileInfo(rawFiles[i]));
    }
    return allFileInfo;
};
var fileHasValidationErrors = function (file) {
    if (file.validationErrors && file.validationErrors.length > 0) {
        return true;
    }
    return false;
};
var filesHaveValidationErrors = function (files) {
    for (var _i = 0, files_1 = files; _i < files_1.length; _i++) {
        var file = files_1[_i];
        if (fileHasValidationErrors(file)) {
            return true;
        }
    }
    return false;
};
var getTotalFilesSizeMessage = function (files) {
    var totalSize = 0;
    var i;
    if (typeof files[0].size === 'number') {
        for (i = 0; i < files.length; i++) {
            if (files[i].size) {
                totalSize += (files[i].size || 0);
            }
        }
    }
    else {
        return '';
    }
    totalSize /= 1024;
    if (totalSize < 1024) {
        return totalSize.toFixed(2) + ' KB';
    }
    else {
        return (totalSize / 1024).toFixed(2) + ' MB';
    }
};
var assignGuidToFiles = function (files, batchFiles) {
    var uid = kendo_react_common_1.guid();
    return files.map(function (file) {
        file.uid = batchFiles ? uid : kendo_react_common_1.guid();
        return file;
    });
};
var getFileStatus = function (currentFiles) {
    var isUploading = false;
    var isUploaded = false;
    var isUploadFailed = false;
    var isUploadValidationFailed = false;
    var checkFilesStatus = function (files) {
        files.forEach(function (file) {
            if (file.status === UploadFileStatus_1.UploadFileStatus.Uploading) {
                isUploading = true;
            }
            if (file.status === UploadFileStatus_1.UploadFileStatus.Uploaded) {
                isUploaded = true;
            }
            if (file.status === UploadFileStatus_1.UploadFileStatus.UploadFailed) {
                isUploadFailed = true;
            }
            if (fileHasValidationErrors(file)) {
                isUploadValidationFailed = true;
            }
        });
    };
    if (Array.isArray(currentFiles)) {
        checkFilesStatus(currentFiles);
    }
    else {
        Object.keys(currentFiles).forEach(function (key) {
            checkFilesStatus(currentFiles[key]);
        });
    }
    return [isUploading, isUploaded, isUploadFailed, isUploadValidationFailed];
};
exports.default = {
    fileHasValidationErrors: fileHasValidationErrors,
    filesHaveValidationErrors: filesHaveValidationErrors,
    getTotalFilesSizeMessage: getTotalFilesSizeMessage,
    getAllFileInfo: getAllFileInfo,
    getFileInfo: getFileInfo,
    getFileExtension: getFileExtension,
    htmlEncode: htmlEncode,
    assignGuidToFiles: assignGuidToFiles,
    getFileStatus: getFileStatus
};
//# sourceMappingURL=utils.js.map