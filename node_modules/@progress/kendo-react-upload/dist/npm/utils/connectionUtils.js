"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var populateClientFormData = function (data, clientData) {
    Object.keys(clientData).forEach(function (key) {
        data.append(key, clientData[key]);
    });
};
var populateUploadFormData = function (files, saveField, clientData) {
    var data = new FormData();
    populateClientFormData(data, clientData);
    files.forEach(function (file) {
        var rawFile = file.getRawFile ? file.getRawFile() : '';
        if (rawFile) {
            data.append(saveField, rawFile, file.name);
        }
        else {
            data.append(saveField, rawFile);
        }
    });
    return data;
};
var populateRemoveFormData = function (fileNames, removeField, clientData) {
    var data = new FormData();
    populateClientFormData(data, clientData);
    fileNames.forEach(function (fileName) {
        data.append(removeField, fileName);
    });
    return data;
};
var populateRequestOptions = function (headers, async) {
    return {
        headers: headers,
        responseType: async.responseType,
        withCredentials: async.withCredentials
    };
};
var cloneRequestHeaders = function (headers) {
    var cloned = {};
    Object.keys(headers).forEach(function (key) {
        cloned[key] = headers[key];
    });
    return cloned;
};
var convertAxiosResponse = function (event) {
    var data = event.data, config = event.config, others = __rest(event, ["data", "config"]);
    return __assign({ response: data }, others);
};
exports.default = {
    populateClientFormData: populateClientFormData,
    populateUploadFormData: populateUploadFormData,
    populateRemoveFormData: populateRemoveFormData,
    populateRequestOptions: populateRequestOptions,
    cloneRequestHeaders: cloneRequestHeaders,
    convertAxiosResponse: convertAxiosResponse
};
//# sourceMappingURL=connectionUtils.js.map