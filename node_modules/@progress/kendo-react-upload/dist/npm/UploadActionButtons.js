"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var kendo_react_intl_1 = require("@progress/kendo-react-intl");
var messages_1 = require("./messages");
/**
 * @hidden
 */
var UploadActionButtons = /** @class */ (function (_super) {
    __extends(UploadActionButtons, _super);
    function UploadActionButtons() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onClearClick = function () {
            if (_this.props.disabled) {
                return;
            }
            if (_this.props.onClear) {
                _this.props.onClear.call(undefined);
            }
        };
        _this.onUploadClick = function () {
            if (_this.props.disabled) {
                return;
            }
            _this.props.onClick.call(undefined, _this.props.uploadButtonIndex);
            if (_this.props.onUpload) {
                _this.props.onUpload.call(undefined);
            }
        };
        return _this;
    }
    UploadActionButtons.prototype.componentDidUpdate = function (prevProps) {
        var _a = this.props, navigationIndex = _a.navigationIndex, clearButtonIndex = _a.clearButtonIndex, uploadButtonIndex = _a.uploadButtonIndex;
        if (navigationIndex !== prevProps.navigationIndex) {
            if (navigationIndex === clearButtonIndex && this._clearElement) {
                this._clearElement.focus();
            }
            if (navigationIndex === uploadButtonIndex && this._uploadElement) {
                this._uploadElement.focus();
            }
        }
    };
    UploadActionButtons.prototype.render = function () {
        var _this = this;
        var _a = this.props, disabled = _a.disabled, navigationIndex = _a.navigationIndex, clearButtonIndex = _a.clearButtonIndex, uploadButtonIndex = _a.uploadButtonIndex, actionsLayout = _a.actionsLayout;
        var localizationService = kendo_react_intl_1.provideLocalizationService(this);
        var wrapperClasses = kendo_react_common_1.classNames('k-actions', {
            'k-actions-start': actionsLayout === 'start',
            'k-actions-center': actionsLayout === 'center',
            'k-actions-end': actionsLayout === 'end',
            'k-actions-stretched': actionsLayout === 'stretched'
        });
        var clearButtonClasses = kendo_react_common_1.classNames('k-button', 'k-clear-selected', disabled ? 'k-state-disabled' : '', navigationIndex === clearButtonIndex ? 'k-state-focused' : '');
        var uploadButtonClasses = kendo_react_common_1.classNames('k-button', 'k-primary', 'k-upload-selected', disabled ? 'k-state-disabled' : '', navigationIndex === uploadButtonIndex ? 'k-state-focused' : '');
        return (React.createElement("div", { className: wrapperClasses },
            React.createElement("button", { ref: function (ref) { return _this._clearElement = ref; }, type: 'button', className: clearButtonClasses, tabIndex: -1, onClick: this.onClearClick }, localizationService
                .toLanguageString(messages_1.clearSelectedFiles, messages_1.messages[messages_1.clearSelectedFiles])),
            React.createElement("button", { ref: function (ref) { return _this._uploadElement = ref; }, type: 'button', className: uploadButtonClasses, tabIndex: -1, onClick: this.onUploadClick }, localizationService
                .toLanguageString(messages_1.uploadSelectedFiles, messages_1.messages[messages_1.uploadSelectedFiles]))));
    };
    return UploadActionButtons;
}(React.Component));
exports.UploadActionButtons = UploadActionButtons;
kendo_react_intl_1.registerForLocalization(UploadActionButtons);
//# sourceMappingURL=UploadActionButtons.js.map