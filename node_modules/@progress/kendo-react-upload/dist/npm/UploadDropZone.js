"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var kendo_react_intl_1 = require("@progress/kendo-react-intl");
var messages_1 = require("./messages");
var utils_1 = require("./utils/utils");
var UploadStatus_1 = require("./UploadStatus");
/**
 * @hidden
 */
var TIME_TO_CHECK_DRAG = 100;
/**
 * @hidden
 */
var UploadDropZone = /** @class */ (function (_super) {
    __extends(UploadDropZone, _super);
    function UploadDropZone() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._documentActive = false;
        _this._elementActive = false;
        _this.onDocumentDragEnter = function () {
            if (!_this.documentActive) {
                _this.documentActive = true;
                var documentInterval = function () {
                    if (_this.isDragOver(_this._lastDocumentDragOver)) {
                        _this.documentActive = false;
                        clearInterval(_this._documentInterval);
                        _this._documentInterval = null;
                        _this._lastDocumentDragOver = null;
                    }
                };
                _this._documentInterval = setInterval(documentInterval, TIME_TO_CHECK_DRAG);
            }
        };
        _this.onDocumentDragOver = function () {
            _this._lastDocumentDragOver = new Date();
        };
        _this.onElementDragEnter = function () {
            if (!_this.elementActive) {
                _this.elementActive = true;
                var elementInterval = function () {
                    if (_this.isDragOver(_this._lastElementDragOver)) {
                        _this.elementActive = false;
                        clearInterval(_this._elementInterval);
                        _this._elementInterval = null;
                        _this._lastElementDragOver = null;
                    }
                };
                _this._elementInterval = setInterval(elementInterval, TIME_TO_CHECK_DRAG);
            }
        };
        _this.onElementDragOver = function (event) {
            event.preventDefault();
            _this._lastElementDragOver = new Date();
        };
        _this.onDrop = function (event) {
            event.preventDefault();
            var droppedFiles = event.dataTransfer.files;
            if (droppedFiles.length > 0 && !_this.props.disabled && _this.props.onAdd) {
                _this.props.onAdd.call(undefined, droppedFiles);
            }
        };
        _this.isDragOver = function (prevDate) {
            return (new Date().getTime() - (prevDate || new Date()).getTime()) > TIME_TO_CHECK_DRAG;
        };
        return _this;
    }
    Object.defineProperty(UploadDropZone.prototype, "documentActive", {
        get: function () {
            return this._documentActive;
        },
        set: function (active) {
            var prevActive = this.documentActive;
            this._documentActive = active;
            if (active !== prevActive) {
                this.forceUpdate();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UploadDropZone.prototype, "elementActive", {
        get: function () {
            return this._elementActive;
        },
        set: function (active) {
            var currentActive = this._elementActive;
            this._elementActive = active;
            if (active !== currentActive) {
                this.setState({});
            }
        },
        enumerable: true,
        configurable: true
    });
    UploadDropZone.prototype.componentDidMount = function () {
        document.addEventListener('dragenter', this.onDocumentDragEnter);
        document.addEventListener('dragover', this.onDocumentDragOver);
    };
    UploadDropZone.prototype.componentWillUnmount = function () {
        document.removeEventListener('dragenter', this.onDocumentDragEnter);
        document.removeEventListener('dragover', this.onDocumentDragOver);
    };
    UploadDropZone.prototype.render = function () {
        var _a = this.props, addButtonComponent = _a.addButtonComponent, fileGroup = _a.fileGroup;
        var localizationService = kendo_react_intl_1.provideLocalizationService(this);
        var dropFilesMessage = localizationService
            .toLanguageString(messages_1.dropFilesHere, messages_1.messages[messages_1.dropFilesHere]);
        var className = kendo_react_common_1.classNames('k-dropzone', this.documentActive ? 'k-dropzone-active' : '', this.elementActive ? 'k-dropzone-hovered' : '');
        var _b = utils_1.default.getFileStatus(fileGroup), isUploading = _b[0], isUploaded = _b[1], isUploadFailed = _b[2], isUploadValidationFailed = _b[3];
        var dropZoneClassName = kendo_react_common_1.classNames('k-dropzone-hint', {
        // Unsure about that, since it hides the "Drop Files Message" when we remove all uploaded components.
        // 'k-hidden': this.isDragged && !this.elementActive
        });
        return (React.createElement("div", { className: className, onDrop: this.onDrop, onDragEnter: this.onElementDragEnter, onDragOver: this.onElementDragOver },
            addButtonComponent,
            isUploading || isUploaded || isUploadFailed || isUploadValidationFailed
                ? React.createElement(UploadStatus_1.UploadStatus, { isUploading: isUploading, isUploaded: isUploaded, isUploadFailed: isUploadFailed })
                : React.createElement("div", { className: dropZoneClassName }, dropFilesMessage)));
    };
    return UploadDropZone;
}(React.Component));
exports.UploadDropZone = UploadDropZone;
kendo_react_intl_1.registerForLocalization(UploadDropZone);
//# sourceMappingURL=UploadDropZone.js.map