"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var UploadUI_1 = require("./UploadUI");
/**
 * @hidden
 */
var NOT_FOCUSED_INDEX = -2;
/**
 * @hidden
 */
var DEFAULT_INDEX = -1;
/**
 * @hidden
 */
var UploadNavigation = /** @class */ (function (_super) {
    __extends(UploadNavigation, _super);
    function UploadNavigation(props) {
        var _this = _super.call(this, props) || this;
        _this.focus = function () {
            if (_this._uploadUI) {
                _this._uploadUI.focus();
            }
        };
        _this.onKeyDown = function (event, isRtl) {
            var navIndex = _this.navIndex;
            var groupKeys = Object.keys(_this.props.groupedFiles);
            var maxFileIndex = (groupKeys.length - 1);
            var maxNavIndex = _this.props.autoUpload || groupKeys.length === 0 ? maxFileIndex : maxFileIndex + 1;
            var cancelButtonIndex = maxFileIndex + 1;
            var uploadButtonIndex = cancelButtonIndex + 1;
            var prevIndex = navIndex === NOT_FOCUSED_INDEX ? DEFAULT_INDEX : navIndex;
            var nextIndex = navIndex;
            switch (event.keyCode) {
                case kendo_react_common_1.Keys.up:
                    if (navIndex > -1) {
                        nextIndex = prevIndex - 1;
                    }
                    break;
                case kendo_react_common_1.Keys.down:
                    if (navIndex < maxNavIndex) {
                        nextIndex = prevIndex + 1;
                    }
                    break;
                case kendo_react_common_1.Keys.left:
                    if (isRtl) {
                        if (navIndex === cancelButtonIndex) {
                            nextIndex = prevIndex + 1;
                        }
                    }
                    else {
                        if (navIndex === uploadButtonIndex) {
                            nextIndex = prevIndex - 1;
                        }
                    }
                    break;
                case kendo_react_common_1.Keys.right:
                    if (isRtl) {
                        if (navIndex === uploadButtonIndex) {
                            nextIndex = prevIndex - 1;
                        }
                    }
                    else {
                        if (navIndex === cancelButtonIndex) {
                            nextIndex = prevIndex + 1;
                        }
                    }
                    break;
                case kendo_react_common_1.Keys.enter:
                    if (navIndex === DEFAULT_INDEX || navIndex === NOT_FOCUSED_INDEX) {
                        if (_this.actionElement) {
                            _this.actionElement.click();
                        }
                    }
                    if (navIndex >= 0 && navIndex <= maxFileIndex) {
                        _this.onRetry(groupKeys[navIndex]);
                    }
                    break;
                case kendo_react_common_1.Keys.space:
                    if (navIndex === DEFAULT_INDEX || navIndex === NOT_FOCUSED_INDEX) {
                        if (_this.actionElement) {
                            _this.actionElement.click();
                        }
                    }
                    break;
                case kendo_react_common_1.Keys.tab:
                    nextIndex = NOT_FOCUSED_INDEX;
                    break;
                case kendo_react_common_1.Keys.delete:
                    if (navIndex >= 0 && navIndex <= maxFileIndex) {
                        nextIndex = prevIndex - 1;
                        _this.onRemove(groupKeys[navIndex]);
                    }
                    break;
                case kendo_react_common_1.Keys.esc:
                    if (navIndex >= 0 && navIndex <= maxFileIndex) {
                        nextIndex = prevIndex - 1;
                        _this.onCancel(groupKeys[navIndex]);
                    }
                    break;
                default:
            }
            _this.navIndex = nextIndex;
        };
        _this.onCancel = function (uid) {
            if (_this.props.onCancel) {
                _this.props.onCancel.call(undefined, uid);
            }
        };
        _this.onClear = function () {
            _this.navIndex = DEFAULT_INDEX;
            if (_this.props.onClear) {
                _this.props.onClear.call(undefined);
            }
        };
        _this.onUpload = function () {
            _this.navIndex = DEFAULT_INDEX;
            if (_this.props.onUpload) {
                _this.props.onUpload.call(undefined);
            }
        };
        _this.onRetry = function (uid) {
            if (_this.props.onRetry) {
                _this.props.onRetry.call(undefined, uid);
            }
        };
        _this.onRemove = function (uid) {
            _this.navIndex = _this.navIndex > DEFAULT_INDEX ? _this.navIndex - 1 : DEFAULT_INDEX;
            if (_this.props.onRemove) {
                _this.props.onRemove.call(undefined, uid);
            }
        };
        _this.onAdd = function (files) {
            _this.navIndex = DEFAULT_INDEX;
            if (_this.props.onAdd) {
                _this.props.onAdd.call(undefined, files);
            }
        };
        _this.onClick = function (navIndex) {
            _this.navIndex = navIndex;
        };
        _this.onFocus = function () {
            if (_this._blurTimeout) {
                clearTimeout(_this._blurTimeout);
                _this._blurTimeout = undefined;
            }
        };
        _this.onBlurTimeout = function () {
            _this.navIndex = NOT_FOCUSED_INDEX;
            _this._blurTimeout = undefined;
        };
        _this.onBlur = function () {
            clearTimeout(_this._blurTimeout);
            _this._blurTimeout = window.setTimeout(_this.onBlurTimeout);
        };
        _this._navIndex = NOT_FOCUSED_INDEX;
        return _this;
    }
    Object.defineProperty(UploadNavigation.prototype, "navIndex", {
        get: function () {
            return this._navIndex;
        },
        set: function (navIndex) {
            var prevNavIndex = this.navIndex;
            this._navIndex = navIndex;
            if (navIndex !== prevNavIndex) {
                this.forceUpdate();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UploadNavigation.prototype, "actionElement", {
        get: function () {
            if (this._uploadUI) {
                return this._uploadUI.actionElement;
            }
        },
        enumerable: true,
        configurable: true
    });
    UploadNavigation.prototype.componentDidUpdate = function (prevProps) {
        var prevGroupLength = Object.keys(prevProps.groupedFiles).length;
        var groupLength = Object.keys(this.props.groupedFiles).length;
        if (prevGroupLength > groupLength && this.navIndex > DEFAULT_INDEX) {
            this.navIndex = this.navIndex - (prevGroupLength - groupLength);
        }
    };
    UploadNavigation.prototype.render = function () {
        var _this = this;
        var _a = this.props, onClear = _a.onClear, onRemove = _a.onRemove, onRetry = _a.onRetry, onCancel = _a.onCancel, onUpload = _a.onUpload, onAdd = _a.onAdd, others = __rest(_a, ["onClear", "onRemove", "onRetry", "onCancel", "onUpload", "onAdd"]);
        return (React.createElement(UploadUI_1.UploadUI, __assign({ ref: function (ref) { return _this._uploadUI = ref; }, className: this.props.className, onKeyDown: this.onKeyDown, navigationIndex: this.navIndex, notFocusedIndex: NOT_FOCUSED_INDEX, onAdd: this.onAdd, onClear: this.onClear, onUpload: this.onUpload, onRemove: this.onRemove, onRetry: this.onRetry, onCancel: this.onCancel, onClick: this.onClick, onFocus: this.onFocus, onBlur: this.onBlur }, others)));
    };
    return UploadNavigation;
}(React.Component));
exports.UploadNavigation = UploadNavigation;
//# sourceMappingURL=UploadNavigation.js.map