{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { useAsyncFocusBlur } from '../hooks/useAsyncFocusBlur';\n/**\n * An utility High-order Component for asynchronous focus/blur handling.\n *\n * By default, the `onFocus` and `onBlur` callbacks are called every time a child components receives/loses focus.\n * Use this utility HOC for scenarios where you need to know if the parent has received focus for the first time, or completely lost focus.\n *\n * @returns\n */\n\nexport var AsyncFocusBlur = function (_a) {\n  var children = _a.children,\n      onFocus = _a.onFocus,\n      onBlur = _a.onBlur,\n      onSyncFocus = _a.onSyncFocus,\n      onSyncBlur = _a.onSyncBlur;\n  var args = useAsyncFocusBlur({\n    onFocus: onFocus,\n    onBlur: onBlur,\n    onSyncFocus: onSyncFocus,\n    onSyncBlur: onSyncBlur\n  });\n  return children.call(undefined, __assign({}, args));\n};","map":null,"metadata":{},"sourceType":"module"}