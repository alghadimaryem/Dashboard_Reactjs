{"ast":null,"code":"var INVALIDMAXFILESIZE = 'invalidMaxFileSize';\nvar INVALIDMINFILESIZE = 'invalidMinFileSize';\nvar INVALIDFILEEXTENSION = 'invalidFileExtension';\n\nvar validateFileExtension = function (file, allowedExtensions) {\n  if (allowedExtensions.length > 0) {\n    if (allowedExtensions.indexOf((file.extension || '').toLowerCase()) < 0) {\n      file.validationErrors = file.validationErrors || [];\n\n      if (file.validationErrors.indexOf(INVALIDFILEEXTENSION) < 0) {\n        file.validationErrors.push(INVALIDFILEEXTENSION);\n      }\n    }\n  }\n};\n\nvar validateFileSize = function (file, minFileSize, maxFileSize) {\n  if (minFileSize !== 0 && (file.size || 0) < minFileSize) {\n    file.validationErrors = file.validationErrors || [];\n\n    if (file.validationErrors.indexOf(INVALIDMINFILESIZE) < 0) {\n      file.validationErrors.push(INVALIDMINFILESIZE);\n    }\n  }\n\n  if (maxFileSize !== 0 && (file.size || 0) > maxFileSize) {\n    file.validationErrors = file.validationErrors || [];\n\n    if (file.validationErrors.indexOf(INVALIDMAXFILESIZE) < 0) {\n      file.validationErrors.push(INVALIDMAXFILESIZE);\n    }\n  }\n};\n\nvar parseAllowedExtensions = function (extensions) {\n  var allowedExtensions = extensions.map(function (ext) {\n    var parsedExt = ext.substring(0, 1) === '.' ? ext : '.' + ext;\n    return parsedExt.toLowerCase();\n  });\n  return allowedExtensions;\n};\n\nvar validateFiles = function (files, restrictionInfo) {\n  var allowedExtensions = parseAllowedExtensions(restrictionInfo.allowedExtensions || []);\n  var maxFileSize = restrictionInfo.maxFileSize || 0;\n  var minFileSize = restrictionInfo.minFileSize || 0;\n  var i;\n\n  for (i = 0; i < files.length; i++) {\n    validateFileExtension(files[i], allowedExtensions);\n    validateFileSize(files[i], minFileSize, maxFileSize);\n  }\n};\n\nexport default {\n  validateFiles: validateFiles\n};","map":null,"metadata":{},"sourceType":"module"}