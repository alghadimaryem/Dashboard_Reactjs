{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport { classNames } from '@progress/kendo-react-common';\nimport { provideLocalizationService, registerForLocalization } from '@progress/kendo-react-intl';\nimport { messages, select } from './messages';\nimport { UploadInput } from './UploadInput';\n/**\n * @hidden\n */\n\nvar UploadAddButton =\n/** @class */\nfunction (_super) {\n  __extends(UploadAddButton, _super);\n\n  function UploadAddButton() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.focus = function () {\n      if (_this._element) {\n        _this._element.focus();\n      }\n    };\n\n    _this.onClick = function () {\n      _this.props.onClick.call(undefined, _this.props.addButtonIndex);\n    };\n\n    _this.onInputMouseDown = function (e) {\n      if (_this._element) {\n        e.preventDefault();\n\n        _this._element.focus();\n      }\n    };\n\n    return _this;\n  }\n\n  Object.defineProperty(UploadAddButton.prototype, \"actionElement\", {\n    get: function () {\n      if (this._uploadInput) {\n        return this._uploadInput.actionElement;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  UploadAddButton.prototype.componentDidUpdate = function (prevProps) {\n    var _a = this.props,\n        navigationIndex = _a.navigationIndex,\n        addButtonIndex = _a.addButtonIndex,\n        notFocusedIndex = _a.notFocusedIndex;\n\n    if (navigationIndex !== prevProps.navigationIndex && prevProps.navigationIndex !== notFocusedIndex && navigationIndex === addButtonIndex && this._element) {\n      this._element.focus();\n    }\n  };\n\n  UploadAddButton.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        navigationIndex = _a.navigationIndex,\n        addButtonIndex = _a.addButtonIndex,\n        tabIndex = _a.tabIndex,\n        id = _a.id,\n        ariaLabelledBy = _a.ariaLabelledBy,\n        ariaDescribedBy = _a.ariaDescribedBy,\n        others = __rest(_a, [\"navigationIndex\", \"addButtonIndex\", \"tabIndex\", \"id\", \"ariaLabelledBy\", \"ariaDescribedBy\"]);\n\n    var localizationService = provideLocalizationService(this);\n    var selectMessage = localizationService.toLanguageString(select, messages[select]);\n    var buttonClassName = classNames('k-button', 'k-upload-button', navigationIndex === addButtonIndex ? 'k-state-focused' : '');\n    return React.createElement(\"div\", {\n      id: id,\n      ref: function (ref) {\n        return _this._element = ref;\n      },\n      role: \"button\",\n      className: buttonClassName,\n      \"aria-label\": selectMessage,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-describedby\": ariaDescribedBy,\n      tabIndex: tabIndex,\n      onClick: this.onClick\n    }, React.createElement(UploadInput, __assign({}, others, {\n      onMouseDown: this.onInputMouseDown,\n      ref: function (ref) {\n        return _this._uploadInput = ref;\n      }\n    })), React.createElement(\"span\", null, selectMessage));\n  };\n\n  return UploadAddButton;\n}(React.Component);\n\nexport { UploadAddButton };\nregisterForLocalization(UploadAddButton);","map":null,"metadata":{},"sourceType":"module"}