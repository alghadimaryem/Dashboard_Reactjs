{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport { Keys } from '@progress/kendo-react-common';\nimport { UploadUI } from './UploadUI';\n/**\n * @hidden\n */\n\nvar NOT_FOCUSED_INDEX = -2;\n/**\n * @hidden\n */\n\nvar DEFAULT_INDEX = -1;\n/**\n * @hidden\n */\n\nvar UploadNavigation =\n/** @class */\nfunction (_super) {\n  __extends(UploadNavigation, _super);\n\n  function UploadNavigation(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.focus = function () {\n      if (_this._uploadUI) {\n        _this._uploadUI.focus();\n      }\n    };\n\n    _this.onKeyDown = function (event, isRtl) {\n      var navIndex = _this.navIndex;\n      var groupKeys = Object.keys(_this.props.groupedFiles);\n      var maxFileIndex = groupKeys.length - 1;\n      var maxNavIndex = _this.props.autoUpload || groupKeys.length === 0 ? maxFileIndex : maxFileIndex + 1;\n      var cancelButtonIndex = maxFileIndex + 1;\n      var uploadButtonIndex = cancelButtonIndex + 1;\n      var prevIndex = navIndex === NOT_FOCUSED_INDEX ? DEFAULT_INDEX : navIndex;\n      var nextIndex = navIndex;\n\n      switch (event.keyCode) {\n        case Keys.up:\n          if (navIndex > -1) {\n            nextIndex = prevIndex - 1;\n          }\n\n          break;\n\n        case Keys.down:\n          if (navIndex < maxNavIndex) {\n            nextIndex = prevIndex + 1;\n          }\n\n          break;\n\n        case Keys.left:\n          if (isRtl) {\n            if (navIndex === cancelButtonIndex) {\n              nextIndex = prevIndex + 1;\n            }\n          } else {\n            if (navIndex === uploadButtonIndex) {\n              nextIndex = prevIndex - 1;\n            }\n          }\n\n          break;\n\n        case Keys.right:\n          if (isRtl) {\n            if (navIndex === uploadButtonIndex) {\n              nextIndex = prevIndex - 1;\n            }\n          } else {\n            if (navIndex === cancelButtonIndex) {\n              nextIndex = prevIndex + 1;\n            }\n          }\n\n          break;\n\n        case Keys.enter:\n          if (navIndex === DEFAULT_INDEX || navIndex === NOT_FOCUSED_INDEX) {\n            if (_this.actionElement) {\n              _this.actionElement.click();\n            }\n          }\n\n          if (navIndex >= 0 && navIndex <= maxFileIndex) {\n            _this.onRetry(groupKeys[navIndex]);\n          }\n\n          break;\n\n        case Keys.space:\n          if (navIndex === DEFAULT_INDEX || navIndex === NOT_FOCUSED_INDEX) {\n            if (_this.actionElement) {\n              _this.actionElement.click();\n            }\n          }\n\n          break;\n\n        case Keys.tab:\n          nextIndex = NOT_FOCUSED_INDEX;\n          break;\n\n        case Keys.delete:\n          if (navIndex >= 0 && navIndex <= maxFileIndex) {\n            nextIndex = prevIndex - 1;\n\n            _this.onRemove(groupKeys[navIndex]);\n          }\n\n          break;\n\n        case Keys.esc:\n          if (navIndex >= 0 && navIndex <= maxFileIndex) {\n            nextIndex = prevIndex - 1;\n\n            _this.onCancel(groupKeys[navIndex]);\n          }\n\n          break;\n\n        default:\n      }\n\n      _this.navIndex = nextIndex;\n    };\n\n    _this.onCancel = function (uid) {\n      if (_this.props.onCancel) {\n        _this.props.onCancel.call(undefined, uid);\n      }\n    };\n\n    _this.onClear = function () {\n      _this.navIndex = DEFAULT_INDEX;\n\n      if (_this.props.onClear) {\n        _this.props.onClear.call(undefined);\n      }\n    };\n\n    _this.onUpload = function () {\n      _this.navIndex = DEFAULT_INDEX;\n\n      if (_this.props.onUpload) {\n        _this.props.onUpload.call(undefined);\n      }\n    };\n\n    _this.onRetry = function (uid) {\n      if (_this.props.onRetry) {\n        _this.props.onRetry.call(undefined, uid);\n      }\n    };\n\n    _this.onRemove = function (uid) {\n      _this.navIndex = _this.navIndex > DEFAULT_INDEX ? _this.navIndex - 1 : DEFAULT_INDEX;\n\n      if (_this.props.onRemove) {\n        _this.props.onRemove.call(undefined, uid);\n      }\n    };\n\n    _this.onAdd = function (files) {\n      _this.navIndex = DEFAULT_INDEX;\n\n      if (_this.props.onAdd) {\n        _this.props.onAdd.call(undefined, files);\n      }\n    };\n\n    _this.onClick = function (navIndex) {\n      _this.navIndex = navIndex;\n    };\n\n    _this.onFocus = function () {\n      if (_this._blurTimeout) {\n        clearTimeout(_this._blurTimeout);\n        _this._blurTimeout = undefined;\n      }\n    };\n\n    _this.onBlurTimeout = function () {\n      _this.navIndex = NOT_FOCUSED_INDEX;\n      _this._blurTimeout = undefined;\n    };\n\n    _this.onBlur = function () {\n      clearTimeout(_this._blurTimeout);\n      _this._blurTimeout = window.setTimeout(_this.onBlurTimeout);\n    };\n\n    _this._navIndex = NOT_FOCUSED_INDEX;\n    return _this;\n  }\n\n  Object.defineProperty(UploadNavigation.prototype, \"navIndex\", {\n    get: function () {\n      return this._navIndex;\n    },\n    set: function (navIndex) {\n      var prevNavIndex = this.navIndex;\n      this._navIndex = navIndex;\n\n      if (navIndex !== prevNavIndex) {\n        this.forceUpdate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(UploadNavigation.prototype, \"actionElement\", {\n    get: function () {\n      if (this._uploadUI) {\n        return this._uploadUI.actionElement;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  UploadNavigation.prototype.componentDidUpdate = function (prevProps) {\n    var prevGroupLength = Object.keys(prevProps.groupedFiles).length;\n    var groupLength = Object.keys(this.props.groupedFiles).length;\n\n    if (prevGroupLength > groupLength && this.navIndex > DEFAULT_INDEX) {\n      this.navIndex = this.navIndex - (prevGroupLength - groupLength);\n    }\n  };\n\n  UploadNavigation.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        onClear = _a.onClear,\n        onRemove = _a.onRemove,\n        onRetry = _a.onRetry,\n        onCancel = _a.onCancel,\n        onUpload = _a.onUpload,\n        onAdd = _a.onAdd,\n        others = __rest(_a, [\"onClear\", \"onRemove\", \"onRetry\", \"onCancel\", \"onUpload\", \"onAdd\"]);\n\n    return React.createElement(UploadUI, __assign({\n      ref: function (ref) {\n        return _this._uploadUI = ref;\n      },\n      className: this.props.className,\n      onKeyDown: this.onKeyDown,\n      navigationIndex: this.navIndex,\n      notFocusedIndex: NOT_FOCUSED_INDEX,\n      onAdd: this.onAdd,\n      onClear: this.onClear,\n      onUpload: this.onUpload,\n      onRemove: this.onRemove,\n      onRetry: this.onRetry,\n      onCancel: this.onCancel,\n      onClick: this.onClick,\n      onFocus: this.onFocus,\n      onBlur: this.onBlur\n    }, others));\n  };\n\n  return UploadNavigation;\n}(React.Component);\n\nexport { UploadNavigation };","map":null,"metadata":{},"sourceType":"module"}