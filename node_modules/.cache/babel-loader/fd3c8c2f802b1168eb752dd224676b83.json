{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as React from 'react';\nimport { classNames } from '@progress/kendo-react-common';\nimport { provideLocalizationService, registerForLocalization } from '@progress/kendo-react-intl';\nimport { messages, headerStatusUploading, headerStatusUploaded } from './messages';\n/**\n * @hidden\n */\n\nvar UploadStatus =\n/** @class */\nfunction (_super) {\n  __extends(UploadStatus, _super);\n\n  function UploadStatus() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  UploadStatus.prototype.render = function () {\n    var _a = this.props,\n        isUploading = _a.isUploading,\n        isUploaded = _a.isUploaded,\n        isUploadFailed = _a.isUploadFailed;\n    var className = classNames('k-upload-status', 'k-upload-status-total');\n    var statusClassName = classNames(!isUploading && !isUploadFailed && isUploaded ? 'k-i-checkmark' : '', !isUploading && isUploadFailed ? 'k-i-exception' : '', isUploading ? 'k-i-loading' : '', 'k-icon');\n    var statusText = '';\n    var localizationService = provideLocalizationService(this);\n\n    if (isUploading) {\n      statusText = localizationService.toLanguageString(headerStatusUploading, messages[headerStatusUploading]);\n    } else if (isUploaded || isUploadFailed) {\n      statusText = localizationService.toLanguageString(headerStatusUploaded, messages[headerStatusUploaded]);\n    }\n\n    return React.createElement(\"div\", {\n      className: className\n    }, React.createElement(\"span\", {\n      className: statusClassName\n    }), statusText);\n  };\n\n  return UploadStatus;\n}(React.Component);\n\nexport { UploadStatus };\nregisterForLocalization(UploadStatus);","map":null,"metadata":{},"sourceType":"module"}