{"ast":null,"code":"var proxy = function (a, b) {\n  return function (e) {\n    return b(a(e));\n  };\n};\n\nvar bind = function (el, event, callback) {\n  return el.addEventListener && el.addEventListener(event, callback);\n};\n\nvar unbind = function (el, event, callback) {\n  return el && el.removeEventListener && el.removeEventListener(event, callback);\n};\n\nvar noop = function () {\n  /* empty */\n};\n\nvar preventDefault = function (e) {\n  return e.preventDefault();\n};\n\nvar touchRegExp = /touch/; // 300ms is the usual mouse interval;\n// // However, an underpowered mobile device under a heavy load may queue mouse events for a longer period.\n\nvar IGNORE_MOUSE_TIMEOUT = 2000;\n\nfunction normalizeEvent(e) {\n  if (e.type.match(touchRegExp)) {\n    return {\n      pageX: e.changedTouches[0].pageX,\n      pageY: e.changedTouches[0].pageY,\n      clientX: e.changedTouches[0].clientX,\n      clientY: e.changedTouches[0].clientY,\n      type: e.type,\n      originalEvent: e,\n      isTouch: true\n    };\n  }\n\n  return {\n    pageX: e.pageX,\n    pageY: e.pageY,\n    clientX: e.clientX,\n    clientY: e.clientY,\n    offsetX: e.offsetX,\n    offsetY: e.offsetY,\n    type: e.type,\n    ctrlKey: e.ctrlKey,\n    shiftKey: e.shiftKey,\n    altKey: e.altKey,\n    originalEvent: e\n  };\n}\n\nexport var Draggable = function Draggable(ref) {\n  var this$1 = this;\n  var press = ref.press;\n  if (press === void 0) press = noop;\n  var drag = ref.drag;\n  if (drag === void 0) drag = noop;\n  var release = ref.release;\n  if (release === void 0) release = noop;\n  var mouseOnly = ref.mouseOnly;\n  if (mouseOnly === void 0) mouseOnly = false;\n  this._pressHandler = proxy(normalizeEvent, press);\n  this._dragHandler = proxy(normalizeEvent, drag);\n  this._releaseHandler = proxy(normalizeEvent, release);\n  this._ignoreMouse = false;\n  this._mouseOnly = mouseOnly;\n\n  this._touchstart = function (e) {\n    if (e.touches.length === 1) {\n      this$1._pressHandler(e);\n    }\n  };\n\n  this._touchmove = function (e) {\n    if (e.touches.length === 1) {\n      this$1._dragHandler(e);\n    }\n  };\n\n  this._touchend = function (e) {\n    // the last finger has been lifted, and the user is not doing gesture.\n    // there might be a better way to handle this.\n    if (e.touches.length === 0 && e.changedTouches.length === 1) {\n      this$1._releaseHandler(e);\n\n      this$1._ignoreMouse = true;\n      setTimeout(this$1._restoreMouse, IGNORE_MOUSE_TIMEOUT);\n    }\n  };\n\n  this._restoreMouse = function () {\n    this$1._ignoreMouse = false;\n  };\n\n  this._mousedown = function (e) {\n    var which = e.which;\n\n    if (which && which > 1 || this$1._ignoreMouse) {\n      return;\n    }\n\n    bind(this$1.document, \"mousemove\", this$1._mousemove);\n    bind(this$1.document, \"mouseup\", this$1._mouseup);\n\n    this$1._pressHandler(e);\n  };\n\n  this._mousemove = function (e) {\n    this$1._dragHandler(e);\n  };\n\n  this._mouseup = function (e) {\n    unbind(this$1.document, \"mousemove\", this$1._mousemove);\n    unbind(this$1.document, \"mouseup\", this$1._mouseup);\n\n    this$1._releaseHandler(e);\n  };\n\n  this._pointerdown = function (e) {\n    if (e.isPrimary && e.button === 0) {\n      bind(this$1.document, \"pointermove\", this$1._pointermove);\n      bind(this$1.document, \"pointerup\", this$1._pointerup);\n      bind(this$1.document, \"pointercancel\", this$1._pointerup);\n      bind(this$1.document, \"contextmenu\", preventDefault);\n\n      this$1._pressHandler(e);\n    }\n  };\n\n  this._pointermove = function (e) {\n    if (e.isPrimary) {\n      this$1._dragHandler(e);\n    }\n  };\n\n  this._pointerup = function (e) {\n    if (e.isPrimary) {\n      unbind(this$1.document, \"pointermove\", this$1._pointermove);\n      unbind(this$1.document, \"pointerup\", this$1._pointerup);\n      unbind(this$1.document, \"pointercancel\", this$1._pointerup);\n      unbind(this$1.document, \"contextmenu\", preventDefault);\n\n      this$1._releaseHandler(e);\n    }\n  };\n};\nvar prototypeAccessors = {\n  document: {\n    configurable: true\n  }\n};\n\nDraggable.supportPointerEvent = function supportPointerEvent() {\n  return typeof window !== 'undefined' && window.PointerEvent;\n};\n\nprototypeAccessors.document.get = function () {\n  return this._element ? this._element.ownerDocument : document;\n};\n\nDraggable.prototype.bindTo = function bindTo(element) {\n  if (element === this._element) {\n    return;\n  }\n\n  if (this._element) {\n    this._unbindFromCurrent();\n  }\n\n  this._element = element;\n\n  this._bindToCurrent();\n};\n\nDraggable.prototype._bindToCurrent = function _bindToCurrent() {\n  var element = this._element;\n\n  if (this._usePointers()) {\n    bind(element, \"pointerdown\", this._pointerdown);\n    return;\n  }\n\n  bind(element, \"mousedown\", this._mousedown);\n\n  if (!this._mouseOnly) {\n    bind(element, \"touchstart\", this._touchstart);\n    bind(element, \"touchmove\", this._touchmove);\n    bind(element, \"touchend\", this._touchend);\n  }\n};\n\nDraggable.prototype._unbindFromCurrent = function _unbindFromCurrent() {\n  var element = this._element;\n\n  if (this._usePointers()) {\n    unbind(element, \"pointerdown\", this._pointerdown);\n    unbind(this.document, \"pointermove\", this._pointermove);\n    unbind(this.document, \"pointerup\", this._pointerup);\n    unbind(this.document, \"contextmenu\", preventDefault);\n    unbind(this.document, \"pointercancel\", this._pointerup);\n    return;\n  }\n\n  unbind(element, \"mousedown\", this._mousedown);\n\n  if (!this._mouseOnly) {\n    unbind(element, \"touchstart\", this._touchstart);\n    unbind(element, \"touchmove\", this._touchmove);\n    unbind(element, \"touchend\", this._touchend);\n  }\n};\n\nDraggable.prototype._usePointers = function _usePointers() {\n  return !this._mouseOnly && Draggable.supportPointerEvent();\n};\n\nDraggable.prototype.update = function update(ref) {\n  var press = ref.press;\n  if (press === void 0) press = noop;\n  var drag = ref.drag;\n  if (drag === void 0) drag = noop;\n  var release = ref.release;\n  if (release === void 0) release = noop;\n  var mouseOnly = ref.mouseOnly;\n  if (mouseOnly === void 0) mouseOnly = false;\n  this._pressHandler = proxy(normalizeEvent, press);\n  this._dragHandler = proxy(normalizeEvent, drag);\n  this._releaseHandler = proxy(normalizeEvent, release);\n  this._mouseOnly = mouseOnly;\n};\n\nDraggable.prototype.destroy = function destroy() {\n  this._unbindFromCurrent();\n\n  this._element = null;\n};\n\nObject.defineProperties(Draggable.prototype, prototypeAccessors); // Re-export as \"default\" field to address a bug\n// where the ES Module is imported by CommonJS code.\n//\n// See https://github.com/telerik/kendo-angular/issues/1314\n\nDraggable.default = Draggable; // Rollup won't output exports['default'] otherwise\n\nexport default Draggable;","map":null,"metadata":{},"sourceType":"module"}