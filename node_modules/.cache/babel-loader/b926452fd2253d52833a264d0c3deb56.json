{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { UploadFileStatus } from '../interfaces/UploadFileStatus';\n\nvar copyState = function (state) {\n  return (state || []).map(function (file) {\n    return __assign({}, file);\n  });\n};\n\nvar add = function (file, filesState) {\n  filesState.push(file);\n};\n\nvar addMany = function (fileList, filesState) {\n  fileList.forEach(function (file) {\n    return add(file, filesState);\n  });\n};\n\nvar groupFilesByUid = function (files) {\n  var fileGroup = {};\n  files.forEach(function (file) {\n    if (fileGroup[file.uid]) {\n      fileGroup[file.uid].push(file);\n    } else {\n      fileGroup[file.uid] = [file];\n    }\n  });\n  return fileGroup;\n};\n\nvar filesForUpload = function (files) {\n  var notUploadedGroups = {};\n  groupForEach(files, function (currentFiles, uid) {\n    var currentFilesValid = true;\n    currentFiles.forEach(function (file) {\n      if (file.status !== UploadFileStatus.Selected || file.validationErrors && file.validationErrors.length > 0) {\n        currentFilesValid = false;\n      }\n    });\n\n    if (currentFilesValid) {\n      notUploadedGroups[uid] = currentFiles;\n    }\n  });\n  return notUploadedGroups;\n};\n\nvar setFilesStatus = function (filesGroup, status) {\n  groupForEach(filesGroup, function (currentFiles) {\n    currentFiles.forEach(function (file) {\n      file.status = status;\n    });\n  });\n};\n\nvar flatFileGroup = function (fileGroup) {\n  var transformed = [];\n  groupForEach(fileGroup, function (currentFiles) {\n    transformed.push.apply(transformed, currentFiles);\n  });\n  return transformed;\n};\n\nvar groupForEach = function (fileGroup, callBack) {\n  Object.keys(fileGroup).forEach(function (uidKey) {\n    callBack(fileGroup[uidKey], uidKey);\n  });\n};\n\nexport default {\n  copyState: copyState,\n  addMany: addMany,\n  add: add,\n  groupFilesByUid: groupFilesByUid,\n  filesForUpload: filesForUpload,\n  setFilesStatus: setFilesStatus,\n  flatFileGroup: flatFileGroup,\n  groupForEach: groupForEach\n};","map":null,"metadata":{},"sourceType":"module"}