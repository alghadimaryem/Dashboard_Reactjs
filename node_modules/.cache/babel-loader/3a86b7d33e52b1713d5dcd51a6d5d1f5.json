{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n}; // Gets and sets the children. Returns the children or the re-created item with the new children.\n\n\nfunction children(item, subItemsField, subItems) {\n  var _a;\n\n  if (subItems) {\n    return __assign({}, item, (_a = {}, _a[subItemsField] = subItems.length ? subItems.slice() : undefined, _a));\n  } else {\n    return item && item[subItemsField] ? item[subItemsField].slice() : [];\n  }\n}\n\nfunction mapItem(dataItem, subItemsField, callbackfn) {\n  if (dataItem[subItemsField]) {\n    var subItems = children(dataItem, subItemsField).map(function (child) {\n      return mapItem(child, subItemsField, callbackfn);\n    });\n    return callbackfn(children(dataItem, subItemsField, subItems));\n  }\n\n  return callbackfn(dataItem);\n}\n/**\n * Creates a new array with the results of calling the provided callback function\n * on every element in the provided data tree.\n *\n * @param {any[]} tree - The data tree.\n * @param {string} subItemsField - The field which points to the subitems collection of each data item.\n * @param {(value: any) => any} callback - The callback function.\n * @returns {any[]} - The new data tree.\n */\n\n\nexport var mapTree = function (tree, subItemsField, callback) {\n  return tree.map(function (item) {\n    return mapItem(item, subItemsField, callback);\n  }).slice();\n};\n/**\n * Creates a new array with the results of calling the provided callback function\n * on the element which match the `level` in the provided data tree.\n *\n * @param {any[]} tree - The data tree.\n * @param {number[]} level - An array of indexes of each parent and current item in the data tree.\n * @param {string} subItemsField - The field which points to the subitems collection of each data item.\n * @param {(value: any) => any} callback - The callback function.\n * @returns {any[]} - The new data tree.\n */\n\nexport var mapTreeItem = function (tree, level, subItemsField, callback) {\n  var curData = tree;\n  var parentNodes = [];\n\n  for (var i = 0; i < level.length; i++) {\n    curData = curData[level[i]];\n    curData = Array.isArray(curData) ? curData : curData[subItemsField];\n    parentNodes.push(curData);\n  }\n\n  var parent = parentNodes.length > 1 ? parentNodes[parentNodes.length - 2] : tree;\n  var newItemIndex = level[level.length - 1];\n  var newItem = callback(parent[newItemIndex]);\n  parent.splice(newItemIndex, 1, newItem);\n};\n/**\n * Similar to the `Object.assign` function. Additionally, creates a new array for the subitems.\n *\n * @param {object} item - The source data item.\n * @param {string} subItemsField - The field which points to the subitems collection of each data item.\n * @param {object} propsToExtend - The props with which the source data item will be extended.\n * @returns {object} - The target data item.\n */\n\nexport var extendDataItem = function (item, subItemsField, propsToExtend) {\n  var _a;\n\n  return Object.assign({}, item, item[subItemsField] ? (_a = {}, _a[subItemsField] = item[subItemsField].slice(), _a) : {}, propsToExtend || {});\n};\n/**\n * Returns the data item path in the tree based on the level parameter.\n *\n * @param {any[]} tree - The data tree.\n * @param {number[]} level - The level of the target tree item.\n * @param {string} subItemsField - The field which points to the subitems collection of each data item.\n * @returns {any[]} - The path of the data item.\n */\n\nexport var getItemPath = function (tree, level, subItemsField) {\n  var nodes = [];\n  var itemLevel = level.slice();\n\n  if (itemLevel.length) {\n    var element = tree[itemLevel.shift() || 0];\n    nodes.push(element);\n\n    while (itemLevel.length && subItemsField) {\n      element = element[subItemsField][itemLevel.shift() || 0];\n      nodes.push(element);\n    }\n  }\n\n  return nodes;\n};","map":null,"metadata":{},"sourceType":"module"}