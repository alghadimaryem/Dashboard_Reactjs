{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as React from 'react';\nimport { classNames } from '@progress/kendo-react-common';\nimport { provideLocalizationService, registerForLocalization } from '@progress/kendo-react-intl';\nimport { messages, clearSelectedFiles, uploadSelectedFiles } from './messages';\n/**\n * @hidden\n */\n\nvar UploadActionButtons =\n/** @class */\nfunction (_super) {\n  __extends(UploadActionButtons, _super);\n\n  function UploadActionButtons() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.onClearClick = function () {\n      if (_this.props.disabled) {\n        return;\n      }\n\n      if (_this.props.onClear) {\n        _this.props.onClear.call(undefined);\n      }\n    };\n\n    _this.onUploadClick = function () {\n      if (_this.props.disabled) {\n        return;\n      }\n\n      _this.props.onClick.call(undefined, _this.props.uploadButtonIndex);\n\n      if (_this.props.onUpload) {\n        _this.props.onUpload.call(undefined);\n      }\n    };\n\n    return _this;\n  }\n\n  UploadActionButtons.prototype.componentDidUpdate = function (prevProps) {\n    var _a = this.props,\n        navigationIndex = _a.navigationIndex,\n        clearButtonIndex = _a.clearButtonIndex,\n        uploadButtonIndex = _a.uploadButtonIndex;\n\n    if (navigationIndex !== prevProps.navigationIndex) {\n      if (navigationIndex === clearButtonIndex && this._clearElement) {\n        this._clearElement.focus();\n      }\n\n      if (navigationIndex === uploadButtonIndex && this._uploadElement) {\n        this._uploadElement.focus();\n      }\n    }\n  };\n\n  UploadActionButtons.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        disabled = _a.disabled,\n        navigationIndex = _a.navigationIndex,\n        clearButtonIndex = _a.clearButtonIndex,\n        uploadButtonIndex = _a.uploadButtonIndex,\n        actionsLayout = _a.actionsLayout;\n    var localizationService = provideLocalizationService(this);\n    var wrapperClasses = classNames('k-actions', {\n      'k-actions-start': actionsLayout === 'start',\n      'k-actions-center': actionsLayout === 'center',\n      'k-actions-end': actionsLayout === 'end',\n      'k-actions-stretched': actionsLayout === 'stretched'\n    });\n    var clearButtonClasses = classNames('k-button', 'k-clear-selected', disabled ? 'k-state-disabled' : '', navigationIndex === clearButtonIndex ? 'k-state-focused' : '');\n    var uploadButtonClasses = classNames('k-button', 'k-primary', 'k-upload-selected', disabled ? 'k-state-disabled' : '', navigationIndex === uploadButtonIndex ? 'k-state-focused' : '');\n    return React.createElement(\"div\", {\n      className: wrapperClasses\n    }, React.createElement(\"button\", {\n      ref: function (ref) {\n        return _this._clearElement = ref;\n      },\n      type: 'button',\n      className: clearButtonClasses,\n      tabIndex: -1,\n      onClick: this.onClearClick\n    }, localizationService.toLanguageString(clearSelectedFiles, messages[clearSelectedFiles])), React.createElement(\"button\", {\n      ref: function (ref) {\n        return _this._uploadElement = ref;\n      },\n      type: 'button',\n      className: uploadButtonClasses,\n      tabIndex: -1,\n      onClick: this.onUploadClick\n    }, localizationService.toLanguageString(uploadSelectedFiles, messages[uploadSelectedFiles])));\n  };\n\n  return UploadActionButtons;\n}(React.Component);\n\nexport { UploadActionButtons };\nregisterForLocalization(UploadActionButtons);","map":null,"metadata":{},"sourceType":"module"}