{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as React from 'react';\nimport { classNames } from '@progress/kendo-react-common';\nimport { UploadFileStatus } from './interfaces/UploadFileStatus';\nimport { provideLocalizationService, registerForLocalization } from '@progress/kendo-react-intl';\nimport { messages, cancel, retry, remove } from './messages';\n/**\n * @hidden\n */\n\nvar UploadListActionButton =\n/** @class */\nfunction (_super) {\n  __extends(UploadListActionButton, _super);\n\n  function UploadListActionButton(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.buttonClassNames = function (type) {\n      var _a = _this.state,\n          actionFocused = _a.actionFocused,\n          retryFocused = _a.retryFocused;\n      return classNames('k-button k-button-icon k-flat k-upload-action', _this.props.disabled ? 'k-state-disabled' : '', actionFocused && type === 'action' || retryFocused && type === 'retry' ? 'k-state-focused' : '');\n    };\n\n    _this.onRetryFocus = function () {\n      _this.setState({\n        retryFocused: true\n      });\n    };\n\n    _this.onRetryBlur = function () {\n      _this.setState({\n        retryFocused: false\n      });\n    };\n\n    _this.onActionFocus = function () {\n      _this.setState({\n        actionFocused: true\n      });\n    };\n\n    _this.onActionBlur = function () {\n      _this.setState({\n        actionFocused: false\n      });\n    };\n\n    _this.onActionClick = function () {\n      var _a = _this.props,\n          status = _a.status,\n          uid = _a.uid,\n          disabled = _a.disabled,\n          onCancel = _a.onCancel,\n          onRemove = _a.onRemove;\n\n      if (disabled || status === UploadFileStatus.Removing) {\n        return;\n      }\n\n      if (status === UploadFileStatus.Uploading) {\n        onCancel.call(undefined, uid);\n      } else {\n        onRemove.call(undefined, uid);\n      }\n    };\n\n    _this.onRetryClick = function () {\n      var _a = _this.props,\n          uid = _a.uid,\n          disabled = _a.disabled,\n          onRetry = _a.onRetry;\n\n      if (disabled) {\n        return;\n      }\n\n      onRetry.call(undefined, uid);\n    };\n\n    _this.state = {\n      retryFocused: false,\n      actionFocused: false\n    };\n    return _this;\n  }\n\n  UploadListActionButton.prototype.actionButtonTitle = function (status, localizationService) {\n    if (status === UploadFileStatus.Uploading) {\n      return localizationService.toLanguageString(cancel, messages[cancel]);\n    }\n\n    return localizationService.toLanguageString(remove, messages[remove]);\n  };\n\n  UploadListActionButton.prototype.retryButtonTitle = function (localizationService) {\n    return localizationService.toLanguageString(retry, messages[retry]);\n  };\n\n  UploadListActionButton.prototype.render = function () {\n    var _a = this.props,\n        status = _a.status,\n        progress = _a.progress;\n    var actionButtonClassNames = classNames('k-icon', status === UploadFileStatus.Uploading ? 'k-cancel k-i-deny' : '', status !== UploadFileStatus.Uploading ? 'k-delete k-i-x' : '');\n    var isRetryVisible = status === UploadFileStatus.UploadFailed;\n    var isProgressVisible = status === UploadFileStatus.Uploading;\n    var isActionHidden = (status === UploadFileStatus.Uploaded || status === UploadFileStatus.Initial) && !this.props.async.removeUrl;\n    var localizationService = provideLocalizationService(this);\n    var percent = '%';\n    return React.createElement(\"strong\", {\n      className: 'k-upload-status'\n    }, isProgressVisible ? React.createElement(\"span\", {\n      className: 'k-upload-pct'\n    }, progress, percent) : undefined, isRetryVisible ? React.createElement(\"button\", {\n      type: \"button\",\n      tabIndex: -1,\n      className: this.buttonClassNames('retry'),\n      onFocus: this.onRetryFocus,\n      onBlur: this.onRetryBlur,\n      onClick: this.onRetryClick\n    }, React.createElement(\"span\", {\n      \"aria-label\": this.retryButtonTitle(localizationService),\n      title: this.retryButtonTitle(localizationService),\n      className: 'k-icon k-retry k-i-refresh-sm'\n    })) : undefined, !isActionHidden ? React.createElement(\"button\", {\n      type: \"button\",\n      tabIndex: -1,\n      className: this.buttonClassNames('action'),\n      onFocus: this.onActionFocus,\n      onBlur: this.onActionBlur,\n      onClick: this.onActionClick\n    }, React.createElement(\"span\", {\n      \"aria-label\": this.actionButtonTitle(status, localizationService),\n      title: this.actionButtonTitle(status, localizationService),\n      className: actionButtonClassNames\n    })) : undefined);\n  };\n\n  return UploadListActionButton;\n}(React.Component);\n\nexport { UploadListActionButton };\nregisterForLocalization(UploadListActionButton);","map":null,"metadata":{},"sourceType":"module"}