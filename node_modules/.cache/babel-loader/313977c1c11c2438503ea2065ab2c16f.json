{"ast":null,"code":"import { fieldList } from './fieldList';\nvar setterCache = {};\n\nsetterCache.undefined = function (obj) {\n  return obj;\n};\n\nvar defaultValue = function (nextField, options) {\n  return options && options.arrays && !isNaN(Number(nextField)) ? [] : {};\n};\n/**\n * Can be used for setting value to object using field path. For example `users[index].name`.\n *\n * @example\n * ```jsx-no-run\n * const values = {users:[{lastName: 'Doe'}]};\n * const firstUserFirstName = setter('user[0].firstName');\n *\n * firstUserFirstName(values, 'John');\n *\n * console.log(values)\n *\n * // result: {users:[{firstName: 'John', lastName: 'Doe'}]}\n * ```\n */\n\n\nexport function setter(field) {\n  if (setterCache[field]) {\n    return setterCache[field];\n  }\n\n  var fields = fieldList(field);\n\n  setterCache[field] = function (obj, value, options) {\n    var root = obj;\n    var depth = fields.length - 1;\n\n    for (var idx = 0; idx < depth && root; idx++) {\n      root = root[fields[idx]] = root[fields[idx]] || defaultValue(fields[idx + 1], options);\n    }\n\n    root[fields[depth]] = value;\n  };\n\n  return setterCache[field];\n}","map":null,"metadata":{},"sourceType":"module"}