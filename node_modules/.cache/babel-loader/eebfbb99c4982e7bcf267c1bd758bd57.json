{"ast":null,"code":"import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { classNames, getTabIndex } from '@progress/kendo-react-common';\nimport { useLocalization } from '@progress/kendo-react-intl';\nimport { dropZoneHint, dropZoneNote, messages } from './messages';\nimport { validatePackage } from '@progress/kendo-licensing';\nimport { packageMetadata } from './package-metadata';\n/**\n * @hidden\n */\n\nvar TIME_TO_CHECK_DRAG = 100;\n/**\n * Represents the ExternalDropZone component.\n */\n\nexport var ExternalDropZone = React.forwardRef(function (props, ref) {\n  validatePackage(packageMetadata);\n  var target = React.useRef(null);\n  var externalDropZoneRef = React.useRef(null);\n  var elementIntervalRef = React.useRef(null);\n  var elementActiveRef = React.useRef(false);\n  var lastElementDragOverRef = React.useRef(null);\n\n  var _a = React.useState(false),\n      overDropZone = _a[0],\n      setOverDropZone = _a[1];\n\n  var localization = useLocalization();\n  var localizedHint = localization.toLanguageString(dropZoneHint, messages[dropZoneHint]);\n  var localizedNote = localization.toLanguageString(dropZoneNote, messages[dropZoneNote]);\n  var hintElement = props.customHint || React.createElement(\"span\", null, localizedHint);\n  var noteElement = props.customNote || React.createElement(\"span\", null, localizedNote);\n  var uploadRef = props.uploadRef;\n  var focus = React.useCallback(function () {\n    if (externalDropZoneRef.current) {\n      externalDropZoneRef.current.focus();\n    }\n  }, [externalDropZoneRef]);\n  React.useImperativeHandle(target, function () {\n    return {\n      element: externalDropZoneRef.current,\n      focus: focus,\n      props: props\n    };\n  });\n  React.useImperativeHandle(ref, function () {\n    return target.current;\n  });\n  var isDragOver = React.useCallback(function (prevDate) {\n    return new Date().getTime() - (prevDate || new Date()).getTime() > TIME_TO_CHECK_DRAG;\n  }, []);\n  var handleOnDrop = React.useCallback(function (event) {\n    event.preventDefault();\n    var droppedFiles = event.dataTransfer.files;\n\n    if (droppedFiles.length > 0 && !props.disabled && uploadRef && uploadRef.current) {\n      if (uploadRef.current.onAdd) {\n        event.preventDefault();\n        uploadRef.current.onAdd(droppedFiles);\n      }\n    }\n  }, [props.disabled, uploadRef]);\n  var handleOnElementDragEnter = React.useCallback(function () {\n    if (elementActiveRef) {\n      elementActiveRef.current = true;\n\n      var locElementInterval = function () {\n        if (isDragOver(lastElementDragOverRef.current)) {\n          setOverDropZone(false);\n          elementActiveRef.current = false;\n          clearInterval(elementIntervalRef.current);\n          elementIntervalRef.current = null;\n          lastElementDragOverRef.current = null;\n        }\n      };\n\n      elementIntervalRef.current = setInterval(locElementInterval, TIME_TO_CHECK_DRAG);\n    }\n  }, [elementActiveRef, elementIntervalRef, lastElementDragOverRef]);\n  var handleOnElementDragOver = React.useCallback(function (event) {\n    event.preventDefault();\n    lastElementDragOverRef.current = new Date();\n    setOverDropZone(true);\n  }, [lastElementDragOverRef]);\n  return React.createElement(\"div\", {\n    ref: externalDropZoneRef,\n    id: props.id,\n    className: classNames('k-external-dropzone', {\n      'k-external-dropzone-hover': overDropZone,\n      'k-state-disabled': props.disabled\n    }, props.className),\n    tabIndex: getTabIndex(props.tabIndex, props.disabled, undefined),\n    onDrop: handleOnDrop,\n    onDragEnter: handleOnElementDragEnter,\n    onDragOver: handleOnElementDragOver\n  }, React.createElement(\"div\", {\n    style: props.style,\n    className: 'k-dropzone-inner'\n  }, React.createElement(\"span\", {\n    className: 'k-icon k-i-upload'\n  }), React.createElement(\"span\", {\n    className: 'k-dropzone-hint'\n  }, hintElement), React.createElement(\"span\", {\n    className: 'k-dropzone-note'\n  }, noteElement)));\n});\nvar propTypes = {\n  id: PropTypes.string,\n  tabIndex: PropTypes.number,\n  editorRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.any\n  })]),\n  disabled: PropTypes.bool\n};\nExternalDropZone.displayName = 'KendoReactExternalDropZone'; // TODO: delete casting when @types/react is updated!\n\nExternalDropZone.propTypes = propTypes;","map":null,"metadata":{},"sourceType":"module"}