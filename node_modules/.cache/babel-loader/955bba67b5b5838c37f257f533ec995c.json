{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nvar populateClientFormData = function (data, clientData) {\n  Object.keys(clientData).forEach(function (key) {\n    data.append(key, clientData[key]);\n  });\n};\n\nvar populateUploadFormData = function (files, saveField, clientData) {\n  var data = new FormData();\n  populateClientFormData(data, clientData);\n  files.forEach(function (file) {\n    var rawFile = file.getRawFile ? file.getRawFile() : '';\n\n    if (rawFile) {\n      data.append(saveField, rawFile, file.name);\n    } else {\n      data.append(saveField, rawFile);\n    }\n  });\n  return data;\n};\n\nvar populateRemoveFormData = function (fileNames, removeField, clientData) {\n  var data = new FormData();\n  populateClientFormData(data, clientData);\n  fileNames.forEach(function (fileName) {\n    data.append(removeField, fileName);\n  });\n  return data;\n};\n\nvar populateRequestOptions = function (headers, async) {\n  return {\n    headers: headers,\n    responseType: async.responseType,\n    withCredentials: async.withCredentials\n  };\n};\n\nvar cloneRequestHeaders = function (headers) {\n  var cloned = {};\n  Object.keys(headers).forEach(function (key) {\n    cloned[key] = headers[key];\n  });\n  return cloned;\n};\n\nvar convertAxiosResponse = function (event) {\n  var data = event.data,\n      config = event.config,\n      others = __rest(event, [\"data\", \"config\"]);\n\n  return __assign({\n    response: data\n  }, others);\n};\n\nexport default {\n  populateClientFormData: populateClientFormData,\n  populateUploadFormData: populateUploadFormData,\n  populateRemoveFormData: populateRemoveFormData,\n  populateRequestOptions: populateRequestOptions,\n  cloneRequestHeaders: cloneRequestHeaders,\n  convertAxiosResponse: convertAxiosResponse\n};","map":null,"metadata":{},"sourceType":"module"}