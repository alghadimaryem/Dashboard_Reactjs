{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as React from 'react';\nimport { classNames } from '@progress/kendo-react-common';\nimport { provideLocalizationService, registerForLocalization } from '@progress/kendo-react-intl';\nimport { messages, dropFilesHere } from './messages';\nimport utils from './utils/utils';\nimport { UploadStatus } from './UploadStatus';\n/**\n * @hidden\n */\n\nvar TIME_TO_CHECK_DRAG = 100;\n/**\n * @hidden\n */\n\nvar UploadDropZone =\n/** @class */\nfunction (_super) {\n  __extends(UploadDropZone, _super);\n\n  function UploadDropZone() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._documentActive = false;\n    _this._elementActive = false;\n\n    _this.onDocumentDragEnter = function () {\n      if (!_this.documentActive) {\n        _this.documentActive = true;\n\n        var documentInterval = function () {\n          if (_this.isDragOver(_this._lastDocumentDragOver)) {\n            _this.documentActive = false;\n            clearInterval(_this._documentInterval);\n            _this._documentInterval = null;\n            _this._lastDocumentDragOver = null;\n          }\n        };\n\n        _this._documentInterval = setInterval(documentInterval, TIME_TO_CHECK_DRAG);\n      }\n    };\n\n    _this.onDocumentDragOver = function () {\n      _this._lastDocumentDragOver = new Date();\n    };\n\n    _this.onElementDragEnter = function () {\n      if (!_this.elementActive) {\n        _this.elementActive = true;\n\n        var elementInterval = function () {\n          if (_this.isDragOver(_this._lastElementDragOver)) {\n            _this.elementActive = false;\n            clearInterval(_this._elementInterval);\n            _this._elementInterval = null;\n            _this._lastElementDragOver = null;\n          }\n        };\n\n        _this._elementInterval = setInterval(elementInterval, TIME_TO_CHECK_DRAG);\n      }\n    };\n\n    _this.onElementDragOver = function (event) {\n      event.preventDefault();\n      _this._lastElementDragOver = new Date();\n    };\n\n    _this.onDrop = function (event) {\n      event.preventDefault();\n      var droppedFiles = event.dataTransfer.files;\n\n      if (droppedFiles.length > 0 && !_this.props.disabled && _this.props.onAdd) {\n        _this.props.onAdd.call(undefined, droppedFiles);\n      }\n    };\n\n    _this.isDragOver = function (prevDate) {\n      return new Date().getTime() - (prevDate || new Date()).getTime() > TIME_TO_CHECK_DRAG;\n    };\n\n    return _this;\n  }\n\n  Object.defineProperty(UploadDropZone.prototype, \"documentActive\", {\n    get: function () {\n      return this._documentActive;\n    },\n    set: function (active) {\n      var prevActive = this.documentActive;\n      this._documentActive = active;\n\n      if (active !== prevActive) {\n        this.forceUpdate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(UploadDropZone.prototype, \"elementActive\", {\n    get: function () {\n      return this._elementActive;\n    },\n    set: function (active) {\n      var currentActive = this._elementActive;\n      this._elementActive = active;\n\n      if (active !== currentActive) {\n        this.setState({});\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  UploadDropZone.prototype.componentDidMount = function () {\n    document.addEventListener('dragenter', this.onDocumentDragEnter);\n    document.addEventListener('dragover', this.onDocumentDragOver);\n  };\n\n  UploadDropZone.prototype.componentWillUnmount = function () {\n    document.removeEventListener('dragenter', this.onDocumentDragEnter);\n    document.removeEventListener('dragover', this.onDocumentDragOver);\n  };\n\n  UploadDropZone.prototype.render = function () {\n    var _a = this.props,\n        addButtonComponent = _a.addButtonComponent,\n        fileGroup = _a.fileGroup;\n    var localizationService = provideLocalizationService(this);\n    var dropFilesMessage = localizationService.toLanguageString(dropFilesHere, messages[dropFilesHere]);\n    var className = classNames('k-dropzone', this.documentActive ? 'k-dropzone-active' : '', this.elementActive ? 'k-dropzone-hovered' : '');\n\n    var _b = utils.getFileStatus(fileGroup),\n        isUploading = _b[0],\n        isUploaded = _b[1],\n        isUploadFailed = _b[2],\n        isUploadValidationFailed = _b[3];\n\n    var dropZoneClassName = classNames('k-dropzone-hint', {// Unsure about that, since it hides the \"Drop Files Message\" when we remove all uploaded components.\n      // 'k-hidden': this.isDragged && !this.elementActive\n    });\n    return React.createElement(\"div\", {\n      className: className,\n      onDrop: this.onDrop,\n      onDragEnter: this.onElementDragEnter,\n      onDragOver: this.onElementDragOver\n    }, addButtonComponent, isUploading || isUploaded || isUploadFailed || isUploadValidationFailed ? React.createElement(UploadStatus, {\n      isUploading: isUploading,\n      isUploaded: isUploaded,\n      isUploadFailed: isUploadFailed\n    }) : React.createElement(\"div\", {\n      className: dropZoneClassName\n    }, dropFilesMessage));\n  };\n\n  return UploadDropZone;\n}(React.Component);\n\nexport { UploadDropZone };\nregisterForLocalization(UploadDropZone);","map":null,"metadata":{},"sourceType":"module"}