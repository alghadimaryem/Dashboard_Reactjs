{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport KendoDraggable from '@telerik/kendo-draggable';\n/**\n * Represents the KendoReact Draggable component.\n */\n\nvar Draggable =\n/** @class */\nfunction (_super) {\n  __extends(Draggable, _super);\n\n  function Draggable() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * @hidden\n     */\n\n\n    _this.element = null;\n    _this.draggable = new KendoDraggable({\n      press: function (event) {\n        if (_this.element && _this.props.onPress) {\n          _this.props.onPress.call(undefined, {\n            target: _this,\n            event: event,\n            element: _this.element\n          });\n        }\n      },\n      drag: function (event) {\n        if (_this.element && _this.props.onDrag) {\n          _this.props.onDrag.call(undefined, {\n            target: _this,\n            event: event,\n            element: _this.element\n          });\n        }\n      },\n      release: function (event) {\n        if (_this.element && _this.props.onRelease) {\n          _this.props.onRelease.call(undefined, {\n            target: _this,\n            event: event\n          });\n        }\n      }\n    });\n\n    _this.childRef = function (element) {\n      var childRef = _this.props.childRef;\n      _this.element = element;\n\n      if (childRef && typeof childRef === 'function') {\n        childRef(element);\n      }\n    };\n\n    return _this;\n  }\n\n  Draggable.prototype.componentDidMount = function () {\n    if (this.element) {\n      this.draggable.bindTo(this.element);\n    }\n  };\n\n  Draggable.prototype.componentWillUnmount = function () {\n    this.draggable.destroy();\n  };\n\n  Draggable.prototype.render = function () {\n    return React.cloneElement(React.Children.only(this.props.children), {\n      ref: this.childRef\n    });\n  };\n\n  Draggable.propTypes = {\n    children: PropTypes.element.isRequired\n  };\n  return Draggable;\n}(React.Component);\n\nexport { Draggable };","map":null,"metadata":{},"sourceType":"module"}