{"ast":null,"code":"import * as React from 'react';\n/**\n * An utility function for asynchronous focus/blur handling.\n *\n * By default, the `onFocus` and `onBlur` callbacks are called every time a child components receives/loses focus.\n * Use this utility hook for scenarios where you need to know if the parent has received focus for the first time, or completely lost focus.\n *\n * @returns\n */\n\nexport function useAsyncFocusBlur(_a) {\n  var onFocus = _a.onFocus,\n      onBlur = _a.onBlur,\n      onSyncFocus = _a.onSyncFocus,\n      onSyncBlur = _a.onSyncBlur;\n  var focused = React.useRef(false);\n  var tick = React.useRef(0);\n  var nextTick = React.useCallback(function (f) {\n    clearTimeout(tick.current);\n    tick.current = window.setTimeout(function () {\n      return f();\n    });\n  }, [tick]);\n  var handleFocus = React.useCallback(function () {\n    var event = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      event[_i] = arguments[_i];\n    }\n\n    clearTimeout(tick.current);\n\n    if (onSyncFocus) {\n      onSyncFocus.call.apply(onSyncFocus, [undefined].concat(event));\n    }\n\n    if (focused.current) {\n      return;\n    }\n\n    ;\n    focused.current = true;\n\n    if (onFocus) {\n      onFocus.call.apply(onFocus, [undefined].concat(event));\n    }\n  }, [focused, onFocus, onSyncFocus]);\n  var handleBlur = React.useCallback(function () {\n    var event = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      event[_i] = arguments[_i];\n    }\n\n    if (onSyncBlur) {\n      onSyncBlur.call.apply(onSyncBlur, [undefined].concat(event));\n    }\n\n    nextTick(function () {\n      if (!focused.current) {\n        return;\n      }\n\n      if (onBlur) {\n        focused.current = false;\n        onBlur.call.apply(onBlur, [undefined].concat(event));\n      }\n    });\n  }, [focused, nextTick, onBlur, onSyncBlur]);\n  return {\n    onFocus: handleFocus,\n    onBlur: handleBlur\n  };\n}","map":null,"metadata":{},"sourceType":"module"}