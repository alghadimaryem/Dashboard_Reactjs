{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { classNames } from '../classNames';\nimport { SIZE_CLASSES } from './constants';\n/**\n * Represents the [KendoReact SvgIcon component]({% slug overview_svgicon %}).\n *\n * @example\n * ```jsx\n * import { accessibility } from '@progress/kendo-svg-icons';\n *\n * const App = () => {\n *   return (\n *       <SvgIcon icon={accessibility} />\n *   );\n * };\n *    ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\n\nexport var SvgIcon = React.forwardRef(function (props, ref) {\n  var children = props.children,\n      className = props.className,\n      svgClassName = props.svgClassName,\n      icon = props.icon,\n      flip = props.flip,\n      size = props.size,\n      style = props.style,\n      svgStyle = props.svgStyle,\n      themeColor = props.themeColor,\n      viewBox = props.viewBox,\n      others = __rest(props, [\"children\", \"className\", \"svgClassName\", \"icon\", \"flip\", \"size\", \"style\", \"svgStyle\", \"themeColor\", \"viewBox\"]);\n\n  var elementRef = React.useRef(null);\n  React.useImperativeHandle(ref, function () {\n    return {\n      element: elementRef.current\n    };\n  });\n  var iconNameProp = React.useMemo(function () {\n    return icon ? icon.name : defaultProps.icon;\n  }, [icon]);\n  var themeColorProp = React.useMemo(function () {\n    return themeColor || defaultProps.themeColor;\n  }, [themeColor]);\n  var sizeProp = React.useMemo(function () {\n    return size || defaultProps.size;\n  }, [size]);\n  var flipProp = React.useMemo(function () {\n    return flip || defaultProps.flip;\n  }, [flip]);\n  var viewBoxProp = React.useMemo(function () {\n    return viewBox || defaultProps.viewBox;\n  }, [viewBox]);\n  var elementClassNames = React.useMemo(function () {\n    return classNames('k-svg-icon', 'k-color-' + themeColorProp, 'k-svg-i-' + iconNameProp, {\n      'k-flip-h': flipProp === 'horizontal' || flipProp === 'both',\n      'k-flip-v': flipProp === 'vertical' || flipProp === 'both'\n    }, SIZE_CLASSES[sizeProp], className);\n  }, [iconNameProp, themeColorProp, sizeProp, flipProp, className]);\n  var elementStyle = React.useMemo(function () {\n    if (props.width && props.height) {\n      return __assign({\n        width: props.width,\n        height: props.height\n      }, style);\n    } else if (props.width) {\n      return __assign({\n        width: props.width,\n        height: props.width\n      }, style);\n    } else if (props.height) {\n      return __assign({\n        width: props.height,\n        height: props.height\n      }, style);\n    } else {\n      return __assign({}, style);\n    }\n  }, [props.width, props.height, style]);\n  return React.createElement(\"span\", {\n    className: elementClassNames,\n    style: elementStyle,\n    ref: elementRef\n  }, React.createElement(\"svg\", __assign({\n    className: svgClassName,\n    style: svgStyle,\n    \"aria-hidden\": true,\n    focusable: \"false\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: icon ? icon.viewBox : viewBoxProp,\n    dangerouslySetInnerHTML: icon ? {\n      __html: icon.content\n    } : undefined\n  }, others), icon ? undefined : children));\n});\nSvgIcon.propTypes = {\n  style: PropTypes.object,\n  classNames: PropTypes.string,\n  children: PropTypes.any,\n  icon: PropTypes.object,\n  themeColor: PropTypes.oneOf(['inherit', 'primary', 'secondary', 'tertiary', 'info', 'success', 'error', 'warning', 'dark', 'light', 'inverse']),\n  size: PropTypes.oneOf(['default', 'xsmall', 'small', 'medium', 'large', 'xlarge']),\n  flip: PropTypes.oneOf(['default', 'horizontal', 'vertical', 'both'])\n};\nvar defaultProps = {\n  size: 'default',\n  themeColor: 'inherit',\n  flip: 'default',\n  icon: '',\n  viewBox: '0 0 24 24'\n};\nSvgIcon.displayName = 'KendoSvgIcon';","map":null,"metadata":{},"sourceType":"module"}