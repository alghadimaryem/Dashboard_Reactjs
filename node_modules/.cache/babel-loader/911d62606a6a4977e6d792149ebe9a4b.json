{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as React from 'react';\nimport { classNames } from '@progress/kendo-react-common';\nimport { UploadList } from './UploadList';\nimport { UploadAddButton } from './UploadAddButton';\nimport { UploadActionButtons } from './UploadActionButtons';\nimport { UploadDropZone } from './UploadDropZone';\nvar ADD_BUTTON_NAV_INDEX = -1;\n/**\n * @hidden\n */\n\nvar UploadUI =\n/** @class */\nfunction (_super) {\n  __extends(UploadUI, _super);\n\n  function UploadUI() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * @hidden\n     */\n\n\n    _this.focus = function () {\n      if (_this._uploadAddButton) {\n        return _this._uploadAddButton.focus();\n      }\n    };\n    /**\n     * @hidden\n     */\n\n\n    _this.onAdd = function (files) {\n      if (_this.props.onAdd) {\n        _this.props.onAdd.call(undefined, files);\n      }\n    };\n    /**\n     * @hidden\n     */\n\n\n    _this.onRetry = function (uid) {\n      if (_this.props.onRetry) {\n        _this.props.onRetry.call(undefined, uid);\n      }\n    };\n    /**\n     * @hidden\n     */\n\n\n    _this.onCancel = function (uid) {\n      if (_this.props.onCancel) {\n        _this.props.onCancel.call(undefined, uid);\n      }\n    };\n    /**\n     * @hidden\n     */\n\n\n    _this.onClear = function () {\n      if (_this.props.onClear) {\n        _this.props.onClear.call(undefined);\n      }\n    };\n    /**\n     * @hidden\n     */\n\n\n    _this.onUpload = function () {\n      if (_this.props.onUpload) {\n        _this.props.onUpload.call(undefined);\n      }\n    };\n    /**\n     * @hidden\n     */\n\n\n    _this.onRemove = function (uid) {\n      if (_this.props.onRemove) {\n        _this.props.onRemove.call(undefined, uid);\n      }\n    };\n    /**\n     * @hidden\n     */\n\n\n    _this.onKeyDown = function (event) {\n      if (_this.props.onKeyDown) {\n        _this.props.onKeyDown.call(undefined, event, _this.isRtl);\n      }\n    };\n    /**\n     * @hidden\n     */\n\n\n    _this.onFocus = function (event) {\n      if (_this.props.onFocus) {\n        _this.props.onFocus.call(undefined, event);\n      }\n    };\n    /**\n     * @hidden\n     */\n\n\n    _this.onBlur = function (event) {\n      if (_this.props.onBlur) {\n        _this.props.onBlur.call(undefined, event);\n      }\n    };\n    /**\n     * @hidden\n     */\n\n\n    _this.onClick = function (navIndex) {\n      if (_this.props.onClick) {\n        _this.props.onClick.call(undefined, navIndex);\n      }\n    };\n\n    return _this;\n  }\n\n  Object.defineProperty(UploadUI.prototype, \"async\", {\n    get: function () {\n      var _a = this.props,\n          autoUpload = _a.autoUpload,\n          batch = _a.batch,\n          withCredentials = _a.withCredentials,\n          saveField = _a.saveField,\n          saveHeaders = _a.saveHeaders,\n          saveMethod = _a.saveMethod,\n          saveUrl = _a.saveUrl,\n          responseType = _a.responseType,\n          removeField = _a.removeField,\n          removeHeaders = _a.removeHeaders,\n          removeMethod = _a.removeMethod,\n          removeUrl = _a.removeUrl;\n      return {\n        autoUpload: autoUpload,\n        batch: batch,\n        withCredentials: withCredentials,\n        saveField: saveField,\n        saveHeaders: saveHeaders,\n        saveMethod: saveMethod,\n        saveUrl: saveUrl,\n        responseType: responseType,\n        removeField: removeField,\n        removeHeaders: removeHeaders,\n        removeMethod: removeMethod,\n        removeUrl: removeUrl\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(UploadUI.prototype, \"groupsCount\", {\n    get: function () {\n      return Object.keys(this.props.groupedFiles).length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(UploadUI.prototype, \"lastGroupIndex\", {\n    get: function () {\n      return this.groupsCount - 1;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(UploadUI.prototype, \"addButtonIndex\", {\n    get: function () {\n      return ADD_BUTTON_NAV_INDEX;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(UploadUI.prototype, \"clearButtonIndex\", {\n    get: function () {\n      return this.lastGroupIndex + 1;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(UploadUI.prototype, \"uploadButtonIndex\", {\n    get: function () {\n      return this.lastGroupIndex + 2;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(UploadUI.prototype, \"isRtl\", {\n    get: function () {\n      return this._container && getComputedStyle(this._container).direction === 'rtl' || false;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(UploadUI.prototype, \"actionElement\", {\n    /**\n     * @hidden\n     */\n    get: function () {\n      if (this._uploadAddButton) {\n        return this._uploadAddButton.actionElement;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @hidden\n   */\n\n  UploadUI.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        multiple = _a.multiple,\n        disabled = _a.disabled,\n        tabIndex = _a.tabIndex,\n        accept = _a.accept,\n        showFileList = _a.showFileList,\n        groupedFiles = _a.groupedFiles,\n        navigationIndex = _a.navigationIndex,\n        showActionButtons = _a.showActionButtons,\n        actionsLayout = _a.actionsLayout,\n        notFocusedIndex = _a.notFocusedIndex,\n        listItemUI = _a.listItemUI,\n        id = _a.id,\n        ariaLabelledBy = _a.ariaLabelledBy,\n        ariaDescribedBy = _a.ariaDescribedBy;\n    var className = classNames('k-widget', 'k-upload', this.props.className, disabled ? 'k-state-disabled' : '');\n    var addButtonComponent = React.createElement(UploadAddButton, {\n      id: id,\n      ariaLabelledBy: ariaLabelledBy,\n      ariaDescribedBy: ariaDescribedBy,\n      ref: function (ref) {\n        return _this._uploadAddButton = ref;\n      },\n      accept: accept,\n      async: this.async,\n      addButtonIndex: this.addButtonIndex,\n      navigationIndex: navigationIndex,\n      notFocusedIndex: notFocusedIndex,\n      tabIndex: tabIndex,\n      multiple: multiple,\n      disabled: disabled,\n      onAdd: this.onAdd,\n      onClick: this.onClick\n    });\n    return React.createElement(\"div\", {\n      ref: function (ref) {\n        return _this._container = ref;\n      },\n      className: className,\n      onKeyDown: this.onKeyDown,\n      onFocus: this.onFocus,\n      onBlur: this.onBlur\n    }, React.createElement(UploadDropZone, {\n      addButtonComponent: addButtonComponent,\n      fileGroup: groupedFiles,\n      disabled: disabled,\n      onAdd: this.onAdd\n    }), showFileList ? React.createElement(UploadList, {\n      groupedFiles: groupedFiles,\n      disabled: disabled,\n      async: this.async,\n      navigationIndex: navigationIndex,\n      listItemUI: listItemUI,\n      onCancel: this.onCancel,\n      onRemove: this.onRemove,\n      onRetry: this.onRetry,\n      onClick: this.onClick\n    }) : undefined, showActionButtons ? React.createElement(UploadActionButtons, {\n      disabled: disabled,\n      navigationIndex: navigationIndex,\n      clearButtonIndex: this.clearButtonIndex,\n      uploadButtonIndex: this.uploadButtonIndex,\n      actionsLayout: actionsLayout,\n      onUpload: this.onUpload,\n      onClear: this.onClear,\n      onClick: this.onClick\n    }) : undefined);\n  };\n\n  UploadUI.defaultProps = {\n    disabled: false,\n    groupedFiles: {},\n    multiple: true,\n    actionsLayout: 'end'\n  };\n  return UploadUI;\n}(React.Component);\n\nexport { UploadUI };","map":null,"metadata":{},"sourceType":"module"}