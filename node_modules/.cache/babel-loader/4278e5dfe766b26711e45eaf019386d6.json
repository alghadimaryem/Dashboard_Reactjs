{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { classNames } from '../classNames';\nimport { SIZE_CLASSES } from './constants';\n/**\n * Represents the [KendoReact Icon component]({% slug overview_icon %}).\n *\n * @example\n * ```jsx\n * const App = () => {\n *   return (\n *       <Icon name=\"home\"/>\n *   );\n * };\n *    ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\n\nexport var Icon = React.forwardRef(function (props, ref) {\n  var className = props.className,\n      name = props.name,\n      themeColor = props.themeColor,\n      size = props.size,\n      flip = props.flip,\n      style = props.style,\n      others = __rest(props, [\"className\", \"name\", \"themeColor\", \"size\", \"flip\", \"style\"]);\n\n  var elementRef = React.useRef(null);\n  React.useImperativeHandle(ref, function () {\n    return {\n      element: elementRef.current\n    };\n  });\n  var themeColorProp = React.useMemo(function () {\n    return themeColor || defaultProps.themeColor;\n  }, [themeColor]);\n  var sizeProp = React.useMemo(function () {\n    return size || defaultProps.size;\n  }, [size]);\n  var flipProp = React.useMemo(function () {\n    return flip || defaultProps.flip;\n  }, [flip]);\n  var fontClassNames = React.useMemo(function () {\n    return classNames('k-icon', 'k-i-' + name, 'k-color-' + themeColorProp, {\n      'k-flip-h': flipProp === 'horizontal' || flipProp === 'both',\n      'k-flip-v': flipProp === 'vertical' || flipProp === 'both'\n    }, SIZE_CLASSES[sizeProp], className);\n  }, [name, themeColorProp, sizeProp, flipProp, className]);\n  return React.createElement(\"span\", __assign({\n    className: fontClassNames,\n    style: style,\n    ref: elementRef,\n    role: \"presentation\"\n  }, others));\n});\nIcon.propTypes = {\n  style: PropTypes.object,\n  classNames: PropTypes.string,\n  name: PropTypes.string,\n  themeColor: PropTypes.oneOf(['inherit', 'primary', 'secondary', 'tertiary', 'info', 'success', 'error', 'warning', 'dark', 'light', 'inverse']),\n  size: PropTypes.oneOf(['default', 'xsmall', 'small', 'medium', 'large', 'xlarge']),\n  flip: PropTypes.oneOf(['default', 'horizontal', 'vertical', 'both'])\n};\nvar defaultProps = {\n  size: 'default',\n  themeColor: 'inherit',\n  flip: 'default'\n};\nIcon.displayName = 'KendoIcon';","map":null,"metadata":{},"sourceType":"module"}