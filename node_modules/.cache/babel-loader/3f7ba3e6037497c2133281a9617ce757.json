{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport { classNames } from '@progress/kendo-react-common';\nimport utils from './utils/utils';\nimport { provideLocalizationService, registerForLocalization } from '@progress/kendo-react-intl';\nimport { messages, total, files as filesM, statusUploadFailed, statusUploaded } from './messages';\nimport { UploadListActionButton } from './UploadListActionButton';\n/**\n * @hidden\n */\n\nvar UploadListMultiItem =\n/** @class */\nfunction (_super) {\n  __extends(UploadListMultiItem, _super);\n\n  function UploadListMultiItem() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * @hidden\n     */\n\n\n    _this.mapFiles = function () {\n      var files = _this.props.files;\n      return files.map(function (file) {\n        return React.createElement(\"span\", {\n          key: file.name,\n          className: 'k-file-name-size-wrapper'\n        }, React.createElement(\"span\", {\n          className: 'k-file-name',\n          title: file.name\n        }, file.name), utils.fileHasValidationErrors(file) ? React.createElement(\"span\", {\n          className: 'k-file-validation-message k-text-error'\n        }, _this.getFileValidationMessage(file)) : React.createElement(\"span\", {\n          key: file.name + \"-size\",\n          className: 'k-file-size'\n        }, utils.getTotalFilesSizeMessage([file])));\n      });\n    };\n    /**\n     * @hidden\n     */\n\n\n    _this.progress = function () {\n      var files = _this.props.files;\n      var sum = 0;\n      files.forEach(function (file) {\n        sum += file.progress || 0;\n      });\n      return sum / files.length;\n    };\n\n    return _this;\n  }\n  /**\n   * @hidden\n   */\n\n\n  UploadListMultiItem.prototype.getFileValidationMessage = function (file) {\n    var localizationService = provideLocalizationService(this);\n    var validationMessage = '';\n\n    if (file.validationErrors && file.validationErrors.length > 0) {\n      var messageKey = \"upload.\" + file.validationErrors[0];\n      validationMessage = localizationService.toLanguageString(messageKey, messages[messageKey]);\n    }\n\n    return validationMessage;\n  };\n\n  UploadListMultiItem.prototype.render = function () {\n    var _a = this.props,\n        files = _a.files,\n        others = __rest(_a, [\"files\"]);\n\n    var itemClassName = classNames('k-file-multiple');\n\n    var _b = utils.getFileStatus(files),\n        isUploaded = _b[1],\n        isUploadFailed = _b[2],\n        isUploadValidationFailed = _b[3];\n\n    var localizationService = provideLocalizationService(this);\n    var totalMessage = localizationService.toLanguageString(total, messages[total]);\n    var filesMessage = localizationService.toLanguageString(filesM, messages[filesM]);\n    var uploadFailedMessage = localizationService.toLanguageString(statusUploadFailed, messages[statusUploadFailed]);\n    var successMessage = localizationService.toLanguageString(statusUploaded, messages[statusUploaded]);\n    var progress = this.progress();\n    var showProgressBar = !isUploadValidationFailed && !isUploaded && !isUploadFailed;\n    return React.createElement(\"div\", {\n      className: itemClassName\n    }, React.createElement(\"div\", {\n      className: 'k-progressbar',\n      style: {\n        transition: 'opacity 1s ease-in-out',\n        opacity: showProgressBar ? 1 : 0\n      }\n    }, React.createElement(\"span\", {\n      className: 'k-progress',\n      style: {\n        width: (progress || 0) + '%'\n      }\n    })), React.createElement(\"span\", {\n      className: 'k-multiple-files-group-wrapper'\n    }, React.createElement(\"span\", {\n      className: 'k-file-group k-icon k-i-copy'\n    })), React.createElement(\"span\", {\n      className: \"k-multiple-files-wrapper\"\n    }, this.mapFiles(), !isUploadFailed ? progress !== 100 ? React.createElement(\"span\", {\n      className: 'k-file-information'\n    }, totalMessage + \": \" + files.length + \" \" + filesMessage + \", \" + utils.getTotalFilesSizeMessage(files)) : React.createElement(\"span\", {\n      className: 'k-file-information k-text-success'\n    }, files.length + \" \" + successMessage) : React.createElement(\"span\", {\n      className: 'k-file-validation-message k-text-error'\n    }, files.length + \" \" + uploadFailedMessage)), React.createElement(UploadListActionButton, __assign({\n      uid: files[0].uid,\n      status: files[0].status,\n      progress: progress\n    }, others)));\n  };\n\n  return UploadListMultiItem;\n}(React.Component);\n\nexport { UploadListMultiItem };\nregisterForLocalization(UploadListMultiItem);","map":null,"metadata":{},"sourceType":"module"}