{"ast":null,"code":"import { UploadFileStatus } from '../interfaces/UploadFileStatus';\nimport { guid } from '@progress/kendo-react-common';\nvar ampRegExp = /&/g;\nvar ltRegExp = /</g;\nvar quoteRegExp = /\"/g;\nvar aposRegExp = /'/g;\nvar gtRegExp = />/g;\n\nvar htmlEncode = function (value) {\n  return ('' + value).replace(ampRegExp, '&amp;').replace(ltRegExp, '&lt;').replace(gtRegExp, '&gt;').replace(quoteRegExp, '&quot;').replace(aposRegExp, '&#39;');\n};\n\nvar getFileExtension = function (fileName) {\n  var rFileExtension = /\\.([^\\.]+)$/;\n  var matches = fileName.match(rFileExtension);\n  return matches ? matches[0] : '';\n};\n\nvar getFileInfo = function (rawFile) {\n  var fileName = rawFile.name;\n  var fileSize = rawFile.size;\n  return {\n    extension: getFileExtension(fileName),\n    name: htmlEncode(fileName),\n    getRawFile: function () {\n      return rawFile;\n    },\n    size: fileSize,\n    status: UploadFileStatus.Selected,\n    progress: 0,\n    uid: ''\n  };\n};\n\nvar getAllFileInfo = function (rawFiles) {\n  var allFileInfo = new Array();\n  var i;\n\n  for (i = 0; i < rawFiles.length; i++) {\n    allFileInfo.push(getFileInfo(rawFiles[i]));\n  }\n\n  return allFileInfo;\n};\n\nvar fileHasValidationErrors = function (file) {\n  if (file.validationErrors && file.validationErrors.length > 0) {\n    return true;\n  }\n\n  return false;\n};\n\nvar filesHaveValidationErrors = function (files) {\n  for (var _i = 0, files_1 = files; _i < files_1.length; _i++) {\n    var file = files_1[_i];\n\n    if (fileHasValidationErrors(file)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nvar getTotalFilesSizeMessage = function (files) {\n  var totalSize = 0;\n  var i;\n\n  if (typeof files[0].size === 'number') {\n    for (i = 0; i < files.length; i++) {\n      if (files[i].size) {\n        totalSize += files[i].size || 0;\n      }\n    }\n  } else {\n    return '';\n  }\n\n  totalSize /= 1024;\n\n  if (totalSize < 1024) {\n    return totalSize.toFixed(2) + ' KB';\n  } else {\n    return (totalSize / 1024).toFixed(2) + ' MB';\n  }\n};\n\nvar assignGuidToFiles = function (files, batchFiles) {\n  var uid = guid();\n  return files.map(function (file) {\n    file.uid = batchFiles ? uid : guid();\n    return file;\n  });\n};\n\nvar getFileStatus = function (currentFiles) {\n  var isUploading = false;\n  var isUploaded = false;\n  var isUploadFailed = false;\n  var isUploadValidationFailed = false;\n\n  var checkFilesStatus = function (files) {\n    files.forEach(function (file) {\n      if (file.status === UploadFileStatus.Uploading) {\n        isUploading = true;\n      }\n\n      if (file.status === UploadFileStatus.Uploaded) {\n        isUploaded = true;\n      }\n\n      if (file.status === UploadFileStatus.UploadFailed) {\n        isUploadFailed = true;\n      }\n\n      if (fileHasValidationErrors(file)) {\n        isUploadValidationFailed = true;\n      }\n    });\n  };\n\n  if (Array.isArray(currentFiles)) {\n    checkFilesStatus(currentFiles);\n  } else {\n    Object.keys(currentFiles).forEach(function (key) {\n      checkFilesStatus(currentFiles[key]);\n    });\n  }\n\n  return [isUploading, isUploaded, isUploadFailed, isUploadValidationFailed];\n};\n\nexport default {\n  fileHasValidationErrors: fileHasValidationErrors,\n  filesHaveValidationErrors: filesHaveValidationErrors,\n  getTotalFilesSizeMessage: getTotalFilesSizeMessage,\n  getAllFileInfo: getAllFileInfo,\n  getFileInfo: getFileInfo,\n  getFileExtension: getFileExtension,\n  htmlEncode: htmlEncode,\n  assignGuidToFiles: assignGuidToFiles,\n  getFileStatus: getFileStatus\n};","map":null,"metadata":{},"sourceType":"module"}